This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.cursor/rules/test.mdc
.gitignore
background.js
content.js
LICENSE
manifest.json
package.json
popup.html
popup.js
README.md
src/components/VideoPlayer.tsx
src/styles/globals.css
src/utils.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".cursor/rules/test.mdc">
---
description:
globs:
---

# Your rule content

- You can @ files here
- You can use markdown but dont have to
</file>

<file path="LICENSE">
MIT License

Copyright (c) 2024 Lionel

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
</file>

<file path="src/components/VideoPlayer.tsx">
import React from 'react'
import { BookmarkIcon, ClosedCaptionIcon } from '@heroicons/react/24/outline'

interface VideoPlayerProps {
  currentTime: number
  hasCaptions: boolean
  captionsEnabled: boolean
  handleSaveBookmark: (time: number) => void
  toggleCaptions: () => void
}

export const VideoPlayer: React.FC<VideoPlayerProps> = ({
  currentTime,
  hasCaptions,
  captionsEnabled,
  handleSaveBookmark,
  toggleCaptions,
}) => {
  return (
    <div className="video-player">
      {/* Bookmark shortcut area */}
      <div className="flex items-center gap-2">
        <button
          className="bookmark-save-btn"
          onClick={() => handleSaveBookmark(currentTime)}
          title="Save bookmark (B)"
        >
          <BookmarkIcon className="h-5 w-5" />
          <span>Bookmark</span>
        </button>

        <div className="text-sm text-gray-500">
          Press <kbd>B</kbd> to quickly save a bookmark
        </div>
      </div>

      {/* Controls section */}
      <div className="video-controls-right">
        {hasCaptions && (
          <button
            onClick={toggleCaptions}
            className={`control-btn ${captionsEnabled ? 'active' : ''}`}
            title="Toggle captions (C)"
          >
            <ClosedCaptionIcon className="h-5 w-5" />
          </button>
        )}

        <button
          className="control-btn"
          onClick={() => handleSaveBookmark(currentTime)}
          title="Save bookmark (B)"
        >
          <BookmarkIcon className="h-5 w-5" />
        </button>
      </div>
    </div>
  )
}
</file>

<file path="src/utils.js">
// Utility functions for the extension

// Debounce function to limit the rate at which a function is called
export const debounce = (func, wait) => {
  let timeout;
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout);
      func(...args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
};

// Format time from seconds to HH:MM:SS
export const formatTime = (seconds) => {
  const hrs = Math.floor(seconds / 3600);
  const mins = Math.floor((seconds % 3600) / 60);
  const secs = Math.floor(seconds % 60);
  
  const parts = [];
  if (hrs > 0) parts.push(String(hrs).padStart(2, '0'));
  parts.push(String(mins).padStart(2, '0'));
  parts.push(String(secs).padStart(2, '0'));
  
  return parts.join(':');
};

// Show notification
export const showNotification = (message, type = 'success') => {
  const notification = document.createElement('div');
  notification.style.cssText = `
    position: fixed;
    bottom: 80px;
    left: 50%;
    transform: translateX(-50%);
    background: ${type === 'success' ? 'rgba(22, 163, 74, 0.9)' : 'rgba(220, 38, 38, 0.9)'};
    color: white;
    padding: 8px 16px;
    border-radius: 4px;
    z-index: 9999;
    font-family: Roboto, Arial, sans-serif;
    font-size: 14px;
    pointer-events: none;
    animation: fadeInOut 2s ease-in-out;
    display: flex;
    align-items: center;
    gap: 8px;
  `;

  notification.innerHTML = `${type === 'success' ? '‚úì' : '‚úï'} ${message}`;
  document.body.appendChild(notification);

  setTimeout(() => {
    if (notification.parentNode) {
      notification.parentNode.removeChild(notification);
    }
  }, 2000);
};

// Lazy load images using IntersectionObserver
export const setupLazyLoading = () => {
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const img = entry.target;
        img.src = img.dataset.src;
        observer.unobserve(img);
      }
    });
  });

  return observer;
};
</file>

<file path=".gitignore">
# Dependencies
node_modules/
.pnp.*
.yarn/
bower_components/
jspm_packages/
web_modules/

# Build & Distribution
dist/
build/
out/
.next/
.nuxt/
.vuepress/dist/
.docusaurus/
*.crx
*.pem
*.zip

# Cache & Temporary
.cache/
.temp/
tmp/
temp/
.parcel-cache/
.rpt2_cache/
.rts2_cache*/
.fusebox/
.dynamodb/
.grunt/
.lock-wscript/
.npm/
.eslintcache
.stylelintcache
*.tsbuildinfo

# Test & Coverage
coverage/
.nyc_output/
lib-cov/
*.lcov

# Logs
logs/
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Environment & Secrets
.env*
*.pem

# IDE & Editor
.idea/
.vscode/
*.sublime-*
.project
.classpath
.settings/
*.swp
*.swo
.tern-port

# OS Generated
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
Thumbs.db
ehthumbs.db
Desktop.ini

# Project Specific
resizer.py
tmpsnaiser4.svg
</file>

<file path="package.json">
{
  "dependencies": {
    "pillow": "^0.0.9"
  }
}
</file>

<file path="README.md">
# YouTube Timestamp Bookmarker

A Chrome extension that enhances your YouTube watching experience by letting you save and manage video timestamps with ease. Perfect for students, researchers, content creators, or anyone who needs to reference specific moments in YouTube videos.

## ‚ú® Features

- üéØ **Quick Bookmark Button**: Integrated bookmark button in YouTube's video player controls
- ‚å®Ô∏è **Keyboard Shortcut**: Press 'B' to instantly save timestamps (can be disabled in settings)
- üìã **Clean Interface**: Intuitive popup interface to manage all your bookmarks
- üîç **Smart Search**: Quickly find bookmarks by searching video titles
- üóÇÔ∏è **Sorting Options**: Sort bookmarks by newest, oldest, or title
- üñºÔ∏è **Rich Preview**: Video thumbnails and titles for easy reference
- üîó **Direct Links**: One-click access to saved timestamps
- üóëÔ∏è **Easy Management**: Delete individual bookmarks or clear all at once
- üí´ **Visual Feedback**: Smooth animations and notifications for all actions

## üöÄ Installation

1. Install from the [Chrome Web Store](link-to-store)
2. The bookmark button (üîñ) will appear in YouTube's video player controls
3. Click the button or press 'B' to save timestamps while watching

## üí° Usage

### Saving Timestamps
- Click the bookmark icon (üîñ) in the video player
- Press 'B' on your keyboard (unless disabled)
- A confirmation notification will appear when saved

### Managing Bookmarks
1. Click the extension icon in your Chrome toolbar
2. View all your saved timestamps
3. Search bookmarks using the search bar
4. Sort using the dropdown menu
5. Click timestamps to jump to that moment
6. Delete individual bookmarks or use "Clear All"

### Settings
- Toggle keyboard shortcut (B) on/off
- Settings persist across browser sessions

## üõ†Ô∏è Development

### Prerequisites
- Node.js (v14 or higher)
- Bun package manager

### Setup
</file>

<file path="src/styles/globals.css">
/* Design System - Core Variables
-------------------------------------------------- */
:root {
  /* Color System */
  --color-primary-50: #eff6ff;
  --color-primary-100: #dbeafe;
  --color-primary-200: #bfdbfe;
  --color-primary-300: #93c5fd;
  --color-primary-400: #60a5fa;
  --color-primary-500: #3b82f6;
  --color-primary-600: #2563eb;
  --color-primary-700: #1d4ed8;
  --color-primary-800: #1e40af;
  --color-primary-900: #1e3a8a;

  /* Neutral Colors */
  --color-neutral-50: #f8fafc;
  --color-neutral-100: #f1f5f9;
  --color-neutral-200: #e2e8f0;
  --color-neutral-300: #cbd5e1;
  --color-neutral-400: #94a3b8;
  --color-neutral-500: #64748b;
  --color-neutral-600: #475569;
  --color-neutral-700: #334155;
  --color-neutral-800: #1e293b;
  --color-neutral-900: #0f172a;

  /* Semantic Colors */
  --color-success: #10b981;
  --color-warning: #f59e0b;
  --color-error: #ef4444;
  --color-info: #3b82f6;

  /* Theme Tokens */
  --primary-color: var(--color-primary-600);
  --primary-hover: var(--color-primary-700);
  --background-color: var(--color-neutral-50);
  --surface-color: white;
  --surface-color-hover: #f7f7f7;
  --surface-color-active: #e2e2e2;
  --text-primary: var(--color-neutral-900);
  --text-secondary: var(--color-neutral-600);
  --border-color: var(--color-neutral-200);
  --shadow-color: rgba(0, 0, 0, 0.1);

  /* Typography */
  --font-family-base: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif;
  --font-size-xs: 0.75rem;
  --font-size-sm: 0.875rem;
  --font-size-base: 1rem;
  --font-size-lg: 1.125rem;
  --font-size-xl: 1.25rem;
  --font-size-2xl: 1.5rem;
  
  /* Spacing System */
  --space-1: 0.25rem;
  --space-2: 0.5rem;
  --space-3: 0.75rem;
  --space-4: 1rem;
  --space-6: 1.5rem;
  --space-8: 2rem;
  --space-12: 3rem;
  --space-16: 4rem;

  /* Shadows */
  --shadow-sm: 0 1px 2px 0 var(--shadow-color);
  --shadow-md: 0 4px 6px -1px var(--shadow-color);
  --shadow-lg: 0 10px 15px -3px var(--shadow-color);
  --shadow-xl: 0 20px 25px -5px var(--shadow-color);

  /* Border Radius */
  --radius-sm: 0.375rem;
  --radius-md: 0.5rem;
  --radius-lg: 0.75rem;
  --radius-full: 9999px;

  /* Z-index */
  --z-dropdown: 1000;
  --z-sticky: 1020;
  --z-fixed: 1030;
  --z-modal: 1040;
  --z-popover: 1050;
  --z-tooltip: 1060;

  /* Transitions */
  --transition-fast: 150ms cubic-bezier(0.4, 0, 0.2, 1);
  --transition-normal: 200ms cubic-bezier(0.4, 0, 0.2, 1);
  --transition-slow: 300ms cubic-bezier(0.4, 0, 0.2, 1);
}

/* Dark Mode Theme
-------------------------------------------------- */
@media (prefers-color-scheme: dark) {
  :root {
    /* Override theme tokens for dark mode */
    --primary-color: var(--color-primary-400);
    --primary-hover: var(--color-primary-300);
    --background-color: var(--color-neutral-900);
    --surface-color: var(--color-neutral-800);
    --surface-color-hover: var(--color-neutral-700);
    --surface-color-active: var(--color-neutral-600);
    --text-primary: var(--color-neutral-50);
    --text-secondary: var(--color-neutral-400);
    --border-color: var(--color-neutral-700);
    --shadow-color: rgba(0, 0, 0, 0.3);
    
    /* Adjust shadows for dark mode */
    --shadow-sm: 0 1px 2px 0 var(--shadow-color);
    --shadow-md: 0 4px 6px -1px var(--shadow-color);
    --shadow-lg: 0 10px 15px -3px var(--shadow-color);
    
    /* Adjust overlay colors */
    --overlay-background: rgba(0, 0, 0, 0.6);
  }

  /* Dark mode specific component overrides */
  .card {
    background: var(--surface-color);
    border-color: var(--border-color);
  }

  .card:hover {
    background: var(--surface-color-hover);
    border-color: var(--border-color);
    box-shadow: var(--shadow-lg);
  }

  .input {
    background: var(--surface-color);
    border-color: var(--border-color);
    color: var(--text-primary);
  }

  .input:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2);
  }

  .input::placeholder {
    color: var(--text-secondary);
  }

  .bookmark-save-btn {
    background: var(--surface-color);
    border-color: var(--border-color);
    color: var(--text-secondary);
  }

  .bookmark-save-btn:hover {
    background: var(--primary-color);
    border-color: var(--primary-color);
    color: white;
  }

  .modal-overlay {
    background: var(--overlay-background);
    backdrop-filter: blur(8px);
  }

  .modal-content {
    background: var(--surface-color);
    border: 1px solid var(--border-color);
  }

  .toast {
    background: var(--surface-color);
    border: 1px solid var(--border-color);
    box-shadow: var(--shadow-lg);
  }

  .dropdown-content {
    background: var(--surface-color);
    border-color: var(--border-color);
    box-shadow: var(--shadow-lg);
  }

  .dropdown-item:hover {
    background: var(--surface-color-hover);
  }

  .tooltip::before {
    background: var(--surface-color);
    border: 1px solid var(--border-color);
    color: var(--text-primary);
  }

  .tag {
    background: var(--surface-color);
    border-color: var(--border-color);
  }

  .tag:hover {
    background: var(--primary-color);
    border-color: var(--primary-color);
  }

  /* Skeleton loading in dark mode */
  .skeleton {
    background: linear-gradient(
      90deg,
      var(--surface-color) 25%,
      var(--surface-color-hover) 50%,
      var(--surface-color) 75%
    );
  }

  /* Scrollbar dark mode */
  *::-webkit-scrollbar-thumb {
    background-color: var(--color-neutral-600);
  }

  *::-webkit-scrollbar-thumb:hover {
    background-color: var(--color-neutral-500);
  }

  /* Progress bar dark mode */
  .progress-bar {
    background: var(--surface-color-hover);
  }

  /* Code blocks and pre elements */
  pre, code {
    background: var(--surface-color-hover);
    border-color: var(--border-color);
  }
}

/* Smooth theme transitions */
body * {
  transition: background-color 200ms ease,
              border-color 200ms ease,
              color 200ms ease,
              box-shadow 200ms ease;
}

/* Base Styles
-------------------------------------------------- */
*, *::before, *::after {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

html {
  font-size: 16px;
  -webkit-text-size-adjust: 100%;
  font-feature-settings: "cv02", "cv03", "cv04", "cv11";
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

body {
  font-family: var(--font-family-base);
  font-size: var(--font-size-base);
  line-height: 1.5;
  color: var(--text-primary);
  background-color: var(--background-color);
  transition: background-color var(--transition-normal),
              color var(--transition-normal);
}

/* Layout & Grid
-------------------------------------------------- */
.container {
  width: 100%;
  margin-inline: auto;
  padding-inline: var(--space-4);
  max-width: min(100% - 2rem, 80rem);
}

.grid {
  display: grid;
  gap: var(--space-4);
}

@media (min-width: 640px) {
  .grid {
    grid-template-columns: repeat(auto-fit, minmax(min(100%, 300px), 1fr));
  }
}

/* Typography
-------------------------------------------------- */
h1, h2, h3, h4, h5, h6 {
  line-height: 1.2;
  color: var(--text-primary);
  font-weight: 600;
}

h1 { font-size: var(--font-size-2xl); }
h2 { font-size: var(--font-size-xl); }
h3 { font-size: var(--font-size-lg); }

/* Components
-------------------------------------------------- */
.bookmark-save-btn {
  background: var(--surface-color);
  border: 1px solid var(--border-color);
  padding: 0 var(--space-md);
  border-radius: var(--radius-sm);
  display: flex;
  align-items: center;
  gap: var(--space-sm);
  color: var(--text-secondary);
  transition: all var(--transition-normal);
  height: 36px;
  margin-right: var(--space-md);
  font-size: 14px;
  font-weight: 500;
  cursor: pointer;
  user-select: none;
}

.bookmark-save-btn:hover {
  background: var(--primary-color);
  color: white;
  border-color: var(--primary-color);
  box-shadow: var(--shadow-sm);
  transform: translateY(-1px);
}

.bookmark-save-btn:active {
  transform: scale(0.98) translateY(0);
}

.bookmark-save-btn svg {
  width: 16px;
  height: 16px;
  transition: transform var(--transition-fast);
}

.bookmark-save-btn:hover svg {
  color: white;
  transform: scale(1.1);
}

.video-controls-right {
  display: flex;
  align-items: center;
  gap: var(--space-md);
  padding: var(--space-sm) var(--space-md);
  background: rgba(var(--surface-color), 0.8);
  backdrop-filter: blur(8px);
  -webkit-backdrop-filter: blur(8px);
  border-radius: var(--radius-md);
  box-shadow: var(--shadow-md);
  transition: all var(--transition-normal);
}

@media (hover: hover) {
  .video-controls-right:hover {
    background: rgba(var(--surface-color), 0.9);
    transform: translateY(-2px);
    box-shadow: var(--shadow-lg);
  }
}

@media (max-width: 768px) {
  .video-controls-right {
    gap: var(--space-sm);
    padding: var(--space-xs) var(--space-sm);
  }
  
  .bookmark-save-btn {
    height: 32px;
    padding: 0 var(--space-sm);
    font-size: 13px;
  }
}

.card {
  background: var(--surface-color);
  border-radius: var(--radius-md);
  padding: var(--space-md);
  border: 1px solid var(--border-color);
  transition: var(--transition-normal);
}

.card:hover {
  transform: translateY(-2px);
  box-shadow: 0 12px 24px -10px rgba(0, 0, 0, 0.1);
}

.input {
  background: var(--background-color);
  border: 1px solid var(--border-color);
  border-radius: var(--radius-sm);
  padding: var(--space-sm) var(--space-md);
  color: var(--text-primary);
  font-size: 14px;
  transition: var(--transition-normal);
}

.input:focus {
  border-color: var(--primary-color);
  box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
  outline: none;
}

.input::placeholder {
  color: var(--text-secondary);
}

.modal-overlay {
  position: fixed;
  inset: 0;
  background: rgba(0, 0, 0, 0.4);
  backdrop-filter: blur(4px);
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0;
  transition: opacity var(--transition-normal);
}

.modal-overlay.active {
  opacity: 1;
}

.modal-content {
  background: var(--background-color);
  border-radius: var(--radius-md);
  padding: var(--space-lg);
  max-width: 500px;
  width: 90%;
  position: relative;
  transform: translateY(20px);
  opacity: 0;
  transition: all var(--transition-normal);
}

.modal-overlay.active .modal-content {
  transform: translateY(0);
  opacity: 1;
}

.toast {
  position: fixed;
  bottom: var(--space-lg);
  right: var(--space-lg);
  background: var(--surface-color);
  border-radius: var(--radius-sm);
  padding: var(--space-sm) var(--space-md);
  box-shadow: var(--shadow-md);
  display: flex;
  align-items: center;
  gap: var(--space-sm);
  transform: translateX(120%);
  transition: transform var(--transition-normal);
}

.toast.show {
  transform: translateX(0);
}

.progress-bar {
  width: 100%;
  height: 4px;
  background: var(--border-color);
  border-radius: 2px;
  overflow: hidden;
}

.progress-bar-fill {
  height: 100%;
  background: var(--primary-color);
  transform-origin: left;
  animation: progress-fill var(--transition-slow) ease-out;
}

@keyframes progress-fill {
  from { transform: scaleX(0); }
  to { transform: scaleX(1); }
}

.skeleton {
  background: linear-gradient(
    90deg,
    var(--surface-color) 25%,
    var(--border-color) 50%,
    var(--surface-color) 75%
  );
  background-size: 200% 100%;
  animation: shimmer 1.5s infinite;
  border-radius: var(--radius-sm);
}

.page-transition {
  opacity: 0;
  transform: translateY(20px);
  transition: all var(--transition-normal);
}

.page-transition.enter {
  opacity: 1;
  transform: translateY(0);
}

.pulse {
  position: relative;
}

.pulse::after {
  content: '';
  position: absolute;
  inset: 0;
  border-radius: inherit;
  background: var(--primary-color);
  opacity: 0.5;
  transform: scale(1.2);
  animation: pulse 1.5s ease-out infinite;
}

@keyframes pulse {
  0% {
    transform: scale(1);
    opacity: 0.5;
  }
  100% {
    transform: scale(1.5);
    opacity: 0;
  }
}

.tooltip {
  position: relative;
  display: inline-block;
}

.tooltip::before {
  content: attr(data-tooltip);
  position: absolute;
  bottom: 100%;
  left: 50%;
  transform: translateX(-50%) translateY(-4px);
  padding: var(--space-xs) var(--space-sm);
  background: var(--text-primary);
  color: var(--background-color);
  font-size: 12px;
  border-radius: var(--radius-sm);
  white-space: nowrap;
  opacity: 0;
  visibility: hidden;
  transition: all var(--transition-fast);
}

.tooltip:hover::before {
  opacity: 1;
  visibility: visible;
  transform: translateX(-50%) translateY(-8px);
}

.tag {
  display: inline-flex;
  align-items: center;
  padding: 2px var(--space-sm);
  background: var(--surface-color);
  border: 1px solid var(--border-color);
  border-radius: 12px;
  font-size: 12px;
  color: var(--text-secondary);
  transition: var(--transition-normal);
}

.tag:hover {
  background: var(--primary-color);
  color: white;
  border-color: var(--primary-color);
}

.dropdown {
  position: relative;
}

.dropdown-content {
  position: absolute;
  top: 100%;
  right: 0;
  background: var(--background-color);
  border: 1px solid var(--border-color);
  border-radius: var(--radius-md);
  padding: var(--space-xs);
  min-width: 180px;
  box-shadow: var(--shadow-md);
  opacity: 0;
  visibility: hidden;
  transform: translateY(4px);
  transition: all var(--transition-normal);
}

.dropdown.active .dropdown-content {
  opacity: 1;
  visibility: visible;
  transform: translateY(8px);
}

.dropdown-item {
  display: flex;
  align-items: center;
  gap: var(--space-sm);
  padding: var(--space-sm) var(--space-md);
  color: var(--text-primary);
  border-radius: var(--radius-sm);
  transition: var(--transition-fast);
  cursor: pointer;
}

.dropdown-item:hover {
  background: var(--surface-color);
}

/* Utilities
-------------------------------------------------- */
.visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border-width: 0;
}

.truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/* Print Styles
-------------------------------------------------- */
@media print {
  * {
    background: transparent !important;
    color: #000 !important;
    box-shadow: none !important;
    text-shadow: none !important;
  }

  a, a:visited {
    text-decoration: underline;
  }

  pre, blockquote {
    border: 1px solid #999;
    page-break-inside: avoid;
  }

  thead {
    display: table-header-group;
  }

  tr, img {
    page-break-inside: avoid;
  }

  img {
    max-width: 100% !important;
  }

  @page {
    margin: 0.5cm;
  }

  p, h2, h3 {
    orphans: 3;
    widows: 3;
  }

  h2, h3 {
    page-break-after: avoid;
  }
}

/* Performance Optimizations
-------------------------------------------------- */
@media (prefers-reduced-motion: reduce) {
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

/* Focus Styles
-------------------------------------------------- */
:focus-visible {
  outline: 2px solid var(--primary-color);
  outline-offset: 2px;
  border-radius: var(--radius-sm);
}

*:focus {
  outline: none;
}

/* Scrollbar Styles
-------------------------------------------------- */
* {
  scrollbar-width: thin;
  scrollbar-color: var(--color-neutral-300) transparent;
}

*::-webkit-scrollbar {
  width: 6px;
  height: 6px;
}

*::-webkit-scrollbar-track {
  background: transparent;
}

*::-webkit-scrollbar-thumb {
  background-color: var(--color-neutral-300);
  border-radius: var(--radius-full);
}

*::-webkit-scrollbar-thumb:hover {
  background-color: var(--color-neutral-400);
}
</file>

<file path="manifest.json">
{
  "manifest_version": 3,
  "name": "YouTube Timestamp Bookmarker",
  "version": "1.0",
  "description": "Save and manage YouTube video timestamps with ease",
  "permissions": [
    "storage",
    "activeTab",
    "scripting"
  ],
  "host_permissions": [
    "*://*.youtube.com/*"
  ],
  "action": {
    "default_popup": "popup.html"
  },
  "background": {
    "service_worker": "background.js",
    "type": "module"
  },
  "content_scripts": [
    {
      "matches": ["*://*.youtube.com/*"],
      "js": ["content.js"],
      "run_at": "document_idle"
    }
  ],
  "web_accessible_resources": [
    {
      "resources": ["popup.html", "popup.js"],
      "matches": ["*://*.youtube.com/*"]
    }
  ],
  "icons": {
    "16": "icons/icon_16.png",
    "32": "icons/icon_32.png",
    "48": "icons/icon_48.png",
    "128": "icons/icon_128.png"
  }
}
</file>

<file path="background.js">
// Initialize storage
chrome.runtime.onInstalled.addListener(() => {
  chrome.storage.sync.get('bookmarks', (result) => {
    if (!result.bookmarks) {
      chrome.storage.sync.set({ bookmarks: [] }, () => {
        console.log('Storage initialized');
      });
    }
  });
});

// Handle messages from content script
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  console.log('Received message:', request);

  if (request.type === 'ADD_BOOKMARK') {
    handleAddBookmark(request.data, sendResponse);
    return true; // Will respond asynchronously
  }
});

// Handle adding a bookmark
async function handleAddBookmark(bookmarkData, sendResponse) {
  if (!bookmarkData || !bookmarkData.videoId) {
    console.error('Invalid bookmark data');
    sendResponse({ success: false, error: 'Invalid bookmark data' });
    return;
  }

  try {
    const result = await chrome.storage.sync.get('bookmarks');
    const bookmarks = result.bookmarks || [];

    // Find existing bookmark for this video
    const existingIndex = bookmarks.findIndex(
      (b) => b.videoId === bookmarkData.videoId
    );

    if (existingIndex >= 0) {
      // Replace existing bookmark
      bookmarks[existingIndex] = {
        ...bookmarkData,
        updatedAt: Date.now(),
      };
      console.log('Updated existing bookmark for video:', bookmarkData.videoId);
    } else {
      // Add new bookmark
      bookmarks.push({
        ...bookmarkData,
        createdAt: Date.now(),
      });
      console.log('Added new bookmark for video:', bookmarkData.videoId);
    }

    // Save updated bookmarks
    await chrome.storage.sync.set({ bookmarks });
    console.log('Bookmark saved successfully');
    sendResponse({ success: true });
  } catch (error) {
    console.error('Error processing bookmark:', error);
    sendResponse({
      success: false,
      error: error.message,
    });
  }
}

// Keep service worker active
const KEEP_ALIVE_INTERVAL = 20000; // 20 seconds

async function keepAlive() {
  try {
    const tabs = await chrome.tabs.query({ url: '*://*.youtube.com/*' });
    if (tabs.length > 0) {
      // We have active YouTube tabs, ping them to keep the service worker alive
      tabs.forEach((tab) => {
        chrome.tabs.sendMessage(tab.id, { type: 'PING' }).catch(() => {
          // Ignore errors - tab might have been closed
        });
      });
    }
  } catch (error) {
    console.error('Keep alive error:', error);
  }
}

// Set up periodic keep-alive
setInterval(keepAlive, KEEP_ALIVE_INTERVAL);

// Handle service worker lifecycle
self.addEventListener('activate', (event) => {
  event.waitUntil(async () => {
    // Take control of all clients
    await clients.claim();
    console.log('Service worker activated and claimed clients');
  });
});
</file>

<file path="content.js">
// YouTube Timestamp Bookmarker Extension
console.log('Timpstamp Extension Loaded');

let currentVideoId = null;
let port = null;

// Connect to background script
function connectToBackground() {
  try {
    port = chrome.runtime.connect({ name: 'timpstamp' });
    console.log('Connected to background script');
  } catch (error) {
    console.error('Failed to connect to background:', error);
  }
}

// Save timestamp
function saveTimestamp() {
  try {
    const video = document.querySelector('video');
    if (!video) {
      showNotification('Error: Video not found');
      return;
    }

    const videoId = new URLSearchParams(window.location.search).get('v');
    if (!videoId) {
      showNotification('Error: Video ID not found');
      return;
    }

    const currentTime = Math.floor(video.currentTime);
    const hours = Math.floor(currentTime / 3600);
    const minutes = Math.floor((currentTime % 3600) / 60);
    const seconds = currentTime % 60;

    const formattedTime =
      hours > 0
        ? `${hours}:${minutes.toString().padStart(2, '0')}:${seconds
            .toString()
            .padStart(2, '0')}`
        : `${minutes}:${seconds.toString().padStart(2, '0')}`;

    const bookmark = {
      videoId,
      videoTitle: document.title.split(' - YouTube')[0].trim(),
      timestamp: currentTime,
      formattedTime,
      url: `https://youtube.com/watch?v=${videoId}&t=${currentTime}s`,
      savedAt: Date.now(),
    };

    chrome.runtime.sendMessage(
      {
        type: 'ADD_BOOKMARK',
        data: bookmark,
      },
      (response) => {
        if (chrome.runtime.lastError) {
          console.error('Failed to save bookmark:', chrome.runtime.lastError);
          showNotification('Failed to save timestamp ‚ùå');
          // Try to reconnect
          connectToBackground();
          return;
        }

        if (response && response.success) {
          showNotification('Timestamp saved! üéâ');
        } else {
          showNotification('Failed to save timestamp ‚ùå');
        }
      }
    );
  } catch (error) {
    console.error('Error saving timestamp:', error);
    showNotification('Failed to save timestamp ‚ùå');
  }
}

// Show notification
function showNotification(message) {
  try {
    const existing = document.querySelector('.yt-timestamp-notification');
    if (existing) {
      existing.remove();
    }

    const notification = document.createElement('div');
    notification.className = 'yt-timestamp-notification';
    notification.textContent = message;
    notification.style.cssText = `
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: var(--yt-spec-brand-background-primary, #0f0f0f);
            color: var(--yt-spec-text-primary, #fff);
            padding: 12px 24px;
            border-radius: 4px;
            z-index: 999999;
            font-family: "YouTube Sans","Roboto",sans-serif;
            font-size: 14px;
            font-weight: 500;
            box-shadow: 0 4px 32px rgba(0,0,0,0.4);
            border: 1px solid var(--yt-spec-10-percent-layer, #ffffff1a);
            pointer-events: none;
        `;

    document.body.appendChild(notification);
    setTimeout(() => {
      if (notification.parentNode) {
        notification.remove();
      }
    }, 3000);
  } catch (error) {
    console.error('Error showing notification:', error);
  }
}

// Create bookmark button
function createButton() {
  const button = document.createElement('button');
  button.className = 'ytp-button timpstamp-btn';
  button.title = 'Save timestamp (B)';
  button.innerHTML = `
        <svg height="100%" version="1.1" viewBox="0 0 24 24" width="100%">
            <path d="M17 3H7c-1.1 0-2 .9-2 2v16l7-3 7 3V5c0-1.1-.9-2-2-2z" fill="currentColor"/>
        </svg>
    `;

  button.addEventListener('click', (e) => {
    e.preventDefault();
    e.stopPropagation();
    saveTimestamp();
  });

  return button;
}

// Add bookmark button to player
function addBookmarkButton() {
  try {
    if (document.querySelector('.timpstamp-btn')) return;

    const rightControls = document.querySelector('.ytp-right-controls');
    if (!rightControls) return;

    const button = createButton();
    rightControls.insertBefore(button, rightControls.firstChild);
    console.log('Bookmark button added');
  } catch (error) {
    console.error('Error adding bookmark button:', error);
  }
}

// Handle keyboard shortcut
function handleKeyPress(event) {
  try {
    if (
      event.target.tagName === 'INPUT' ||
      event.target.tagName === 'TEXTAREA' ||
      event.target.isContentEditable
    ) {
      return;
    }

    if (
      event.key.toLowerCase() === 'b' &&
      !event.ctrlKey &&
      !event.altKey &&
      !event.metaKey &&
      !event.shiftKey
    ) {
      event.preventDefault();
      event.stopPropagation();
      saveTimestamp();
    }
  } catch (error) {
    console.error('Error handling keyboard shortcut:', error);
  }
}

// Initialize extension
function initialize() {
  try {
    console.log('Initializing extension...');

    // Connect to background script
    connectToBackground();

    const videoId = new URLSearchParams(window.location.search).get('v');
    if (!videoId || videoId === currentVideoId) return;

    console.log('New video detected:', videoId);
    currentVideoId = videoId;

    const existingButton = document.querySelector('.timpstamp-btn');
    if (existingButton) {
      existingButton.remove();
    }

    addBookmarkButton();
  } catch (error) {
    console.error('Error initializing extension:', error);
  }
}

// Set up observers and event listeners
try {
  // Watch for player changes
  const observer = new MutationObserver(() => {
    try {
      if (!document.querySelector('.timpstamp-btn')) {
        const controls = document.querySelector('.ytp-right-controls');
        if (controls) {
          addBookmarkButton();
        }
      }
    } catch (error) {
      console.error('Error in mutation observer:', error);
    }
  });

  observer.observe(document.body, {
    childList: true,
    subtree: true,
  });

  // Add event listeners
  document.addEventListener('keydown', handleKeyPress, true);
  window.addEventListener('yt-navigate-finish', initialize);
  window.addEventListener('load', initialize);

  // Initial setup
  console.log('Running initial setup...');
  initialize();
} catch (error) {
  console.error('Error setting up extension:', error);
}
</file>

<file path="popup.html">
<!DOCTYPE html>
<html>
  <head>
    <style>
      body {
        width: 420px;
        min-width: 420px;
        padding: 16px;
        font-family: system-ui, -apple-system, sans-serif;
        margin: 0;
        background: #ffffff;
        color: #1f2937;
      }

      .header {
        display: flex;
        flex-direction: column;
        gap: 12px;
        margin-bottom: 16px;
      }

      .header-top {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0 4px;
      }

      h2 {
        font-size: 18px;
        margin: 0;
        color: #111827;
        font-weight: 600;
        white-space: nowrap;
        flex-shrink: 0;
      }

      .header-controls {
        display: flex;
        align-items: center;
        gap: 8px;
      }

      .sort-select {
        padding: 6px 28px 6px 12px;
        border: 1px solid #e5e7eb;
        border-radius: 6px;
        font-size: 13px;
        outline: none;
        background: white;
        cursor: pointer;
        color: #374151;
        appearance: none;
        background-image: url('data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20fill%3D%22%23374151%22%20d%3D%22M287%2069.4a17.6%2017.6%200%200%200-13-5.4H18.4c-5%200-9.3%201.8-12.9%205.4A17.6%2017.6%200%200%200%200%2082.2c0%205%201.8%209.3%205.4%2012.9l128%20127.9c3.6%203.6%207.8%205.4%2012.8%205.4s9.2-1.8%2012.8-5.4L287%2095c3.5-3.5%205.4-7.8%205.4-12.8%200-5-1.9-9.2-5.4-12.8z%22%2F%3E%3C%2Fsvg%3E');
        background-repeat: no-repeat;
        background-position: right 8px center;
        background-size: 8px auto;
        width: 110px;
      }

      .sort-select:hover {
        border-color: #d1d5db;
      }

      .search-container {
        position: relative;
        margin-bottom: 16px;
        padding: 0 2px;
      }

      .search-input {
        width: calc(100% - 48px);
        padding: 8px 12px 8px 32px;
        border: 1px solid #e5e7eb;
        border-radius: 6px;
        font-size: 13px;
        outline: none;
        transition: all 0.2s;
        background: #f9fafb;
        color: #374151;
      }

      .search-input::placeholder {
        color: #9ca3af;
      }

      .search-input:focus {
        background: white;
        border-color: #3b82f6;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
      }

      .search-icon {
        position: absolute;
        left: 12px;
        top: 50%;
        transform: translateY(-50%);
        color: #9ca3af;
        width: 16px;
        height: 16px;
      }

      .bookmark {
        display: flex;
        gap: 12px;
        padding: 12px;
        border-radius: 8px;
        transition: all 0.2s;
        align-items: center;
        background: white;
        border: 1px solid #f3f4f6;
        margin-bottom: 8px;
        position: relative;
      }

      .bookmark:hover {
        background: #f9fafb;
        transform: translateY(-1px);
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
      }

      .timestamp-preview {
        display: none;
        position: absolute;
        bottom: calc(100% + 8px);
        left: 50%;
        transform: translateX(-50%);
        background: rgba(0, 0, 0, 0.8);
        color: white;
        padding: 8px 12px;
        border-radius: 6px;
        font-size: 12px;
        pointer-events: none;
        white-space: nowrap;
        z-index: 1000;
      }

      .timestamp-preview::after {
        content: '';
        position: absolute;
        top: 100%;
        left: 50%;
        transform: translateX(-50%);
        border-width: 6px;
        border-style: solid;
        border-color: rgba(0, 0, 0, 0.8) transparent transparent transparent;
      }

      .bookmark:hover .timestamp-preview {
        display: block;
      }

      .thumbnail-container {
        position: relative;
        width: 120px;
        height: 68px;
        border-radius: 6px;
        overflow: hidden;
      }

      .thumbnail {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
      }

      .thumbnail-container:hover .thumbnail {
        transform: scale(1.05);
      }

      .timestamp-badge {
        position: absolute;
        bottom: 4px;
        right: 4px;
        background: rgba(0, 0, 0, 0.8);
        color: white;
        padding: 2px 6px;
        border-radius: 4px;
        font-size: 11px;
        font-weight: 500;
      }

      .bookmark-info {
        flex: 1;
        min-width: 0;
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        gap: 8px;
      }

      .title {
        font-size: 14px;
        font-weight: 500;
        color: #111827;
        margin-bottom: 6px;
        line-height: 1.4;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
      }

      .timestamp {
        color: #6b7280;
        font-size: 13px;
        display: flex;
        align-items: center;
        gap: 4px;
        padding: 4px 8px;
        background: #f3f4f6;
        border-radius: 4px;
        font-weight: 500;
      }

      .delete-btn {
        padding: 6px;
        color: #6b7280;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.2s;
        background: transparent;
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0.6;
      }

      .bookmark:hover .delete-btn {
        opacity: 1;
      }

      .delete-btn:hover {
        background: #fee2e2;
        color: #dc2626;
      }

      .delete-all-btn {
        padding: 6px 12px;
        font-size: 13px;
        color: #dc2626;
        border: 1px solid #fecaca;
        border-radius: 6px;
        background: transparent;
        cursor: pointer;
        transition: all 0.2s;
        display: flex;
        align-items: center;
        gap: 6px;
        font-weight: 500;
        white-space: nowrap;
        height: 32px;
        min-width: 90px;
      }

      .delete-all-btn:hover:not(:disabled) {
        background: #fee2e2;
      }

      .delete-all-btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
        border-color: #e5e7eb;
        color: #9ca3af;
      }

      .bookmarks-container {
        max-height: 460px;
        overflow-y: auto;
        margin: 0 -16px;
        padding: 0 16px;
        scrollbar-gutter: stable;
      }

      .bookmarks-container::-webkit-scrollbar {
        width: 6px;
      }

      .bookmarks-container::-webkit-scrollbar-track {
        background: transparent;
      }

      .bookmarks-container::-webkit-scrollbar-thumb {
        background: #e5e7eb;
        border-radius: 3px;
      }

      .bookmarks-container::-webkit-scrollbar-thumb:hover {
        background: #d1d5db;
      }

      .empty-state {
        text-align: center;
        color: #6b7280;
        padding: 32px 24px;
        background: #f9fafb;
        border-radius: 12px;
        border: 1px dashed #e5e7eb;
        font-size: 14px;
        margin: 16px 0;
      }

      .settings {
        padding: 12px;
        background: #f9fafb;
        border-radius: 6px;
        border: 1px solid #e5e7eb;
      }

      .toggle-label {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 13px;
        color: #374151;
        cursor: pointer;
        user-select: none;
      }

      .keyboard-shortcut {
        background: #f3f4f6;
        padding: 2px 6px;
        border-radius: 4px;
        font-family: ui-monospace, SFMono-Regular, Menlo, monospace;
        font-size: 12px;
        color: #4b5563;
        border: 1px solid #e5e7eb;
        margin-left: 4px;
      }

      input[type='checkbox'] {
        accent-color: #3b82f6;
        width: 16px;
        height: 16px;
        border-radius: 4px;
        cursor: pointer;
      }

      a {
        text-decoration: none;
        color: inherit;
      }

      a:hover .title {
        color: #3b82f6;
      }

      .timestamp-actions {
        display: flex;
        gap: 4px;
        margin-top: 8px;
      }

      .share-btn,
      .delete-btn {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 6px;
        border: none;
        background: #f3f4f6;
        border-radius: 6px;
        cursor: pointer;
        color: #4b5563;
        transition: all 0.2s;
      }

      .share-btn:hover {
        background: #e5e7eb;
        color: #1a73e8;
      }

      .delete-btn:hover {
        background: #fee2e2;
        color: #dc2626;
      }

      .timestamp-actions button svg {
        width: 16px;
        height: 16px;
      }

      .share-btn {
        padding: 4px;
        color: #6b7280;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.2s;
        background: transparent;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .share-btn:hover {
        background: #f3f4f6;
        color: #3b82f6;
      }

      .share-btn.shared {
        color: #16a34a;
        background: #dcfce7;
        transform: scale(1.1);
      }

      .notification {
        position: fixed;
        bottom: 16px;
        left: 50%;
        transform: translateX(-50%);
        padding: 8px 16px;
        border-radius: 6px;
        font-size: 13px;
        color: white;
        animation: slideUp 0.3s ease-out;
        z-index: 1000;
        background: rgba(0, 0, 0, 0.8);
        backdrop-filter: blur(4px);
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1),
          0 2px 4px -1px rgba(0, 0, 0, 0.06);
      }

      .notification.with-action {
        display: flex;
        align-items: center;
        gap: 12px;
        padding-right: 8px;
      }

      .notification .undo-btn {
        background: rgba(255, 255, 255, 0.2);
        border: none;
        padding: 4px 8px;
        border-radius: 4px;
        color: white;
        font-size: 12px;
        cursor: pointer;
        transition: all 0.2s;
      }

      .notification .undo-btn:hover {
        background: rgba(255, 255, 255, 0.3);
      }

      .delete-btn {
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 28px;
        height: 28px;
        border-radius: 6px;
        border: none;
        background: transparent;
        color: #6b7280;
        cursor: pointer;
        transition: all 0.2s;
      }

      .delete-btn:disabled {
        cursor: not-allowed;
        opacity: 0.5;
      }

      .delete-btn:not(:disabled):hover {
        background: #fee2e2;
        color: #dc2626;
      }

      .loading-spinner {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
      }

      @keyframes spin {
        from {
          transform: rotate(0deg);
        }
        to {
          transform: rotate(360deg);
        }
      }

      .animate-spin {
        animation: spin 1s linear infinite;
      }

      .delete-icon,
      .loading-spinner {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 14px;
        height: 14px;
      }

      .loading-spinner circle {
        opacity: 0.25;
      }

      .loading-spinner path {
        opacity: 0.75;
      }

      @keyframes slideUp {
        from {
          transform: translate(-50%, 20px);
          opacity: 0;
        }
        to {
          transform: translate(-50%, 0);
          opacity: 1;
        }
      }

      @keyframes fadeOut {
        from {
          opacity: 1;
        }
        to {
          opacity: 0;
        }
      }

      .fade-out {
        animation: fadeOut 0.3s ease-out forwards;
      }

      kbd {
        background-color: #f8f9fa;
        border: 1px solid #d1d5db;
        border-radius: 3px;
        box-shadow: 0 1px 1px rgba(0, 0, 0, 0.2);
        color: #333;
        display: inline-block;
        font-family: -apple-system, system-ui, 'Segoe UI', Helvetica, Arial,
          sans-serif;
        font-size: 0.9em;
        line-height: 1;
        padding: 2px 5px;
        margin: 0 2px;
        vertical-align: middle;
      }
    </style>
    <title>YouTube Timestamp Bookmarker</title>
  </head>
  <body>
    <div class="header">
      <div class="header-top">
        <h2>YouTube Timestamps</h2>
        <div class="header-controls">
          <select id="sortSelect" class="sort-select">
            <option value="newest">Latest</option>
            <option value="oldest">Oldest</option>
          </select>
          <button id="deleteAllBtn" class="delete-all-btn">
            <svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor">
              <path
                d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"
              />
            </svg>
            Clear All
          </button>
        </div>
      </div>
      <div class="settings">
        <label class="toggle-label">
          <input type="checkbox" id="shortcutToggle" />
          Enable keyboard shortcut <kbd>B</kbd>
        </label>
      </div>
    </div>

    <div class="search-container">
      <svg class="search-icon" viewBox="0 0 24 24" fill="currentColor">
        <path
          d="M15.5 14h-.79l-.28-.27A6.471 6.471 0 0 0 16 9.5 6.5 6.5 0 1 0 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"
        />
      </svg>
      <input
        type="text"
        id="searchInput"
        class="search-input"
        placeholder="Search your timestamps..."
      />
    </div>

    <div class="bookmarks-container">
      <div id="bookmarksList"></div>
    </div>
    <script type="module" src="popup.js"></script>
  </body>
</html>
</file>

<file path="popup.js">
import {
  debounce,
  formatTime,
  showNotification,
  setupLazyLoading,
} from './src/utils.js';

document.addEventListener('DOMContentLoaded', () => {
  const bookmarksList = document.getElementById('bookmarksList');
  const deleteAllBtn = document.getElementById('deleteAllBtn');
  const searchInput = document.getElementById('searchInput');
  const shortcutToggle = document.getElementById('shortcutToggle');
  const sortSelect = document.getElementById('sortSelect');
  let allBookmarks = []; // Store all bookmarks for filtering
  const lazyLoadObserver = setupLazyLoading();

  // Load shortcut setting
  chrome.storage.sync.get(['shortcutEnabled'], (result) => {
    shortcutToggle.checked = result.shortcutEnabled !== false; // Default to true
  });

  // Save shortcut setting
  shortcutToggle.addEventListener('change', (e) => {
    chrome.storage.sync.set({ shortcutEnabled: e.target.checked });
  });

  function sortBookmarks(bookmarks, sortBy) {
    return [...bookmarks].sort((a, b) => {
      switch (sortBy) {
        case 'newest':
          return (
            (b.savedAt || b.createdAt || 0) - (a.savedAt || a.createdAt || 0)
          );

        case 'oldest':
          return (
            (a.savedAt || a.createdAt || 0) - (b.savedAt || b.createdAt || 0)
          );

        case 'duration':
          return b.timestamp - a.timestamp;

        case 'title':
          return a.videoTitle
            .toLowerCase()
            .localeCompare(b.videoTitle.toLowerCase());

        default:
          return 0;
      }
    });
  }

  function createBookmarkElement(bookmark, index) {
    const thumbnailUrl = `https://i.ytimg.com/vi/${bookmark.videoId}/maxresdefault.jpg`;
    const div = document.createElement('div');
    div.className = 'bookmark';
    const bookmarkId = bookmark.savedAt || bookmark.createdAt;

    div.innerHTML = `
      <div class="timestamp-preview">
        Saved on ${new Date(bookmarkId).toLocaleString(undefined, {
          year: 'numeric',
          month: 'short',
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit',
        })}
      </div>
      <div class="thumbnail-container">
        <img class="thumbnail" data-src="${thumbnailUrl}" alt="Video thumbnail">
        <div class="timestamp-badge">${formatTime(bookmark.timestamp)}</div>
      </div>
      <div class="bookmark-info">
        <div>
          <a href="${bookmark.url}" target="_blank">
            <div class="title">${bookmark.videoTitle}</div>
          </a>
          <div class="timestamp-actions">
            <button class="share-btn" data-url="${
              bookmark.url
            }" title="Copy link to clipboard">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M18 16.08c-.76 0-1.44.3-1.96.77L8.91 12.7c.05-.23.09-.46.09-.7s-.04-.47-.09-.7l7.05-4.11c.54.5 1.25.81 2.04.81 1.66 0 3-1.34 3-3s-1.34-3-3-3-3 1.34-3 3c0 .24.04.47.09.7L8.04 9.81C7.5 9.31 6.79 9 6 9c-1.66 0-3 1.34-3 3s1.34 3 3 3c.79 0 1.5-.31 2.04-.81l7.12 4.16c-.05.21-.08.43-.08.65 0 1.61 1.31 2.92 2.92 2.92s2.92-1.31 2.92-2.92c0-1.61-1.31-2.92-2.92-2.92zM18 4c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zM6 13c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm12 7.02c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1z" fill="currentColor"/>
              </svg>
            </button>
            <button class="delete-btn" data-bookmark-id="${bookmarkId}" title="Delete timestamp">
              <span class="delete-icon">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z" fill="currentColor"/>
                </svg>
              </span>
              <span class="loading-spinner" style="display: none;">
                <svg class="animate-spin" width="14" height="14" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
              </span>
            </button>
          </div>
        </div>
      </div>
    `;

    // Add click handler for share button
    const shareBtn = div.querySelector('.share-btn');
    shareBtn.addEventListener('click', async (e) => {
      e.preventDefault();
      const url = shareBtn.dataset.url;

      try {
        await navigator.clipboard.writeText(url);
        shareBtn.classList.add('shared');
        setTimeout(() => shareBtn.classList.remove('shared'), 1500);
        showNotification('Link copied to clipboard!');
      } catch (err) {
        showNotification('Failed to copy link', 'error');
      }
    });

    // Initialize lazy loading for the thumbnail
    const thumbnail = div.querySelector('.thumbnail');
    lazyLoadObserver.observe(thumbnail);

    return div;
  }

  function updateBookmarksList(bookmarks) {
    const sorted = sortBookmarks(bookmarks, sortSelect.value);

    if (sorted.length === 0) {
      bookmarksList.innerHTML = `
        <div class="empty-state">
          No bookmarks yet! Click the bookmark button while watching a video to save timestamps.
        </div>
      `;
      deleteAllBtn.disabled = true;
      return;
    }

    deleteAllBtn.disabled = false;
    bookmarksList.innerHTML = '';
    sorted.forEach((bookmark, index) => {
      bookmarksList.appendChild(createBookmarkElement(bookmark, index));
    });
  }

  function filterBookmarks(searchTerm) {
    const filtered = searchTerm
      ? allBookmarks.filter((bookmark) =>
          bookmark.videoTitle.toLowerCase().includes(searchTerm.toLowerCase())
        )
      : allBookmarks;
    updateBookmarksList(filtered);
  }

  // Use debounced search
  const debouncedFilter = debounce(
    (searchTerm) => filterBookmarks(searchTerm),
    300
  );
  searchInput.addEventListener('input', (e) => debouncedFilter(e.target.value));

  sortSelect.addEventListener('change', () =>
    filterBookmarks(searchInput.value)
  );

  deleteAllBtn.addEventListener('click', () => {
    if (confirm('Are you sure you want to delete all bookmarks?')) {
      chrome.storage.sync.set({ bookmarks: [] }, () => {
        allBookmarks = [];
        updateBookmarksList([]);
        showNotification('All bookmarks deleted');
      });
    }
  });

  let lastDeletedBookmark = null;

  function showUndoNotification() {
    const notification = document.createElement('div');
    notification.className = 'notification with-action';
    notification.innerHTML = `
      <span>Bookmark deleted</span>
      <button class="undo-btn">Undo</button>
    `;

    document.body.appendChild(notification);

    const undoBtn = notification.querySelector('.undo-btn');
    undoBtn.addEventListener('click', async () => {
      if (lastDeletedBookmark) {
        allBookmarks.push(lastDeletedBookmark);
        await chrome.storage.sync.set({ bookmarks: allBookmarks });
        filterBookmarks(searchInput.value);
        notification.remove();
        showNotification('Bookmark restored');
        lastDeletedBookmark = null;
      }
    });

    setTimeout(() => {
      if (notification.parentNode) {
        notification.remove();
        lastDeletedBookmark = null;
      }
    }, 5000);
  }

  async function deleteBookmark(deleteBtn, bookmarkId) {
    try {
      // Show loading state
      const deleteIcon = deleteBtn.querySelector('.delete-icon');
      const loadingSpinner = deleteBtn.querySelector('.loading-spinner');
      deleteIcon.style.display = 'none';
      loadingSpinner.style.display = 'block';
      deleteBtn.disabled = true;

      const result = await chrome.storage.sync.get(['bookmarks']);
      allBookmarks = result.bookmarks || [];
      const indexToDelete = allBookmarks.findIndex(
        (b) => (b.savedAt || b.createdAt) === parseInt(bookmarkId)
      );

      if (indexToDelete !== -1) {
        lastDeletedBookmark = allBookmarks[indexToDelete];
        allBookmarks.splice(indexToDelete, 1);
        await chrome.storage.sync.set({ bookmarks: allBookmarks });
        filterBookmarks(searchInput.value);
        showUndoNotification();
      }
    } catch (error) {
      console.error('Failed to delete bookmark:', error);
      showNotification('Failed to delete bookmark', 'error');
      // Reset button state
      const deleteIcon = deleteBtn.querySelector('.delete-icon');
      const loadingSpinner = deleteBtn.querySelector('.loading-spinner');
      deleteIcon.style.display = 'block';
      loadingSpinner.style.display = 'none';
      deleteBtn.disabled = false;
    }
  }

  bookmarksList.addEventListener('click', (e) => {
    const deleteBtn = e.target.closest('.delete-btn');
    if (deleteBtn && !deleteBtn.disabled) {
      const bookmarkId = deleteBtn.dataset.bookmarkId;
      deleteBookmark(deleteBtn, bookmarkId);
    }
  });

  // Initial load
  chrome.storage.sync.get(['bookmarks'], (result) => {
    console.log('Loading bookmarks:', result.bookmarks);
    if (result.bookmarks) {
      allBookmarks = result.bookmarks;
      updateBookmarksList(allBookmarks);
    } else {
      updateBookmarksList([]);
    }
  });
});
</file>

</files>
