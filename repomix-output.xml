This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.cursor/
  rules/
    test.mdc
src/
  components/
    VideoPlayer.tsx
  styles/
    globals.css
  utils.js
.gitignore
background.js
content.css
content.js
LICENSE
manifest.json
package.json
popup.css
popup.html
popup.js
README.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".cursor/rules/test.mdc">
---
description:
globs:
---

# Your rule content

- You can @ files here
- You can use markdown but dont have to
</file>

<file path="src/components/VideoPlayer.tsx">
import React from 'react'
import { BookmarkIcon, ClosedCaptionIcon } from '@heroicons/react/24/outline'

interface VideoPlayerProps {
  currentTime: number
  hasCaptions: boolean
  captionsEnabled: boolean
  handleSaveBookmark: (time: number) => void
  toggleCaptions: () => void
}

export const VideoPlayer: React.FC<VideoPlayerProps> = ({
  currentTime,
  hasCaptions,
  captionsEnabled,
  handleSaveBookmark,
  toggleCaptions,
}) => {
  return (
    <div className="video-player">
      {/* Bookmark shortcut area */}
      <div className="flex items-center gap-2">
        <button
          className="bookmark-save-btn"
          onClick={() => handleSaveBookmark(currentTime)}
          title="Save bookmark (B)"
        >
          <BookmarkIcon className="h-5 w-5" />
          <span>Bookmark</span>
        </button>

        <div className="text-sm text-gray-500">
          Press <kbd>B</kbd> to quickly save a bookmark
        </div>
      </div>

      {/* Controls section */}
      <div className="video-controls-right">
        {hasCaptions && (
          <button
            onClick={toggleCaptions}
            className={`control-btn ${captionsEnabled ? 'active' : ''}`}
            title="Toggle captions (C)"
          >
            <ClosedCaptionIcon className="h-5 w-5" />
          </button>
        )}

        <button
          className="control-btn"
          onClick={() => handleSaveBookmark(currentTime)}
          title="Save bookmark (B)"
        >
          <BookmarkIcon className="h-5 w-5" />
        </button>
      </div>
    </div>
  )
}
</file>

<file path="src/utils.js">
// Utility functions for the extension

// Debounce function to limit the rate at which a function is called
export const debounce = (func, wait) => {
  let timeout;
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout);
      func(...args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
};

// Format time from seconds to HH:MM:SS
export const formatTime = (seconds) => {
  const hrs = Math.floor(seconds / 3600);
  const mins = Math.floor((seconds % 3600) / 60);
  const secs = Math.floor(seconds % 60);
  
  const parts = [];
  if (hrs > 0) parts.push(String(hrs).padStart(2, '0'));
  parts.push(String(mins).padStart(2, '0'));
  parts.push(String(secs).padStart(2, '0'));
  
  return parts.join(':');
};

// Show notification
export const showNotification = (message, type = 'success') => {
  const notification = document.createElement('div');
  notification.style.cssText = `
    position: fixed;
    bottom: 80px;
    left: 50%;
    transform: translateX(-50%);
    background: ${type === 'success' ? 'rgba(22, 163, 74, 0.9)' : 'rgba(220, 38, 38, 0.9)'};
    color: white;
    padding: 8px 16px;
    border-radius: 4px;
    z-index: 9999;
    font-family: Roboto, Arial, sans-serif;
    font-size: 14px;
    pointer-events: none;
    animation: fadeInOut 2s ease-in-out;
    display: flex;
    align-items: center;
    gap: 8px;
  `;

  notification.innerHTML = `${type === 'success' ? '✓' : '✕'} ${message}`;
  document.body.appendChild(notification);

  setTimeout(() => {
    if (notification.parentNode) {
      notification.parentNode.removeChild(notification);
    }
  }, 2000);
};

// Lazy load images using IntersectionObserver
export const setupLazyLoading = () => {
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const img = entry.target;
        img.src = img.dataset.src;
        observer.unobserve(img);
      }
    });
  });

  return observer;
};
</file>

<file path="content.css">
/* Styles for elements injected by the content script */

.ytb-bookmark-btn {
  /* Ensure the bookmark icon is visible */
  fill: currentColor;
  /* Add subtle hover effect if desired */
  transition: opacity 0.2s ease-in-out;
}

.ytb-bookmark-btn:hover {
  opacity: 0.8;
}

.ytb-notification {
  position: fixed;
  top: 20px;
  left: 50%;
  transform: translateX(-50%);
  /* Use YouTube's theme variables for better integration */
  background: var(--yt-spec-brand-background-primary, #0f0f0f);
  color: var(--yt-spec-text-primary, #fff);
  padding: 12px 24px;
  border-radius: 4px;
  z-index: 999999; /* High z-index to appear above most elements */
  font-family: "YouTube Sans","Roboto",sans-serif;
  font-size: 14px;
  font-weight: 500;
  box-shadow: 0 4px 32px rgba(0,0,0,0.4);
  border: 1px solid var(--yt-spec-10-percent-layer, rgba(255, 255, 255, 0.1));
  pointer-events: none; /* Don't interfere with clicks */
  opacity: 1;
  transition: opacity 0.5s ease-out;
}

/* Fade out effect can be added if needed */
/*
.ytb-notification.fade-out {
  opacity: 0;
}
*/
</file>

<file path="LICENSE">
MIT License

Copyright (c) 2024 Lionel

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
</file>

<file path="popup.css">
/* Styles for the popup UI */
body {
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  width: 400px; /* Slightly wider for better spacing */
  min-height: 150px;
  max-height: 600px; /* Keep max height */
  overflow-y: auto;
  padding: 10px;
  background-color: #f4f4f4; /* Lighter background */
  margin: 0;
  background: #ffffff;
  color: #1f2937;
  overflow: hidden; /* Prevent body scroll when list scrolls */
}

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 10px; /* Reduced margin */
}

h2 {
  font-size: 1.2em; /* Slightly smaller */
  margin: 0;
  color: #333;
}

.header-controls {
  display: flex;
  align-items: center;
  gap: 8px;
}

.sort-select {
  padding: 6px 28px 6px 12px;
  border: 1px solid #e5e7eb;
  border-radius: 6px;
  font-size: 13px;
  outline: none;
  background: white;
  cursor: pointer;
  color: #374151;
  appearance: none;
  background-image: url('data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20fill%3D%22%236B7280%22%20d%3D%22M287%2069.4a17.6%2017.6%200%200%200-13-5.4H18.4c-5%200-9.3%201.8-12.9%205.4A17.6%2017.6%200%200%200%200%2082.2c0%205%201.8%209.3%205.4%2012.9l128%20127.9c3.6%203.6%207.8%205.4%2012.8%205.4s9.2-1.8%2012.8-5.4L287%2095c3.5-3.5%205.4-7.8%205.4-12.8%200-5-1.9-9.2-5.4-12.8z%22%2F%3E%3C%2Fsvg%3E');
  background-repeat: no-repeat;
  background-position: right 8px center;
  background-size: 8px auto;
  width: 110px;
}

.sort-select:hover {
  border-color: #d1d5db;
}

.search-container {
  position: relative;
  /* Adjusted margin-bottom if needed based on layout */
  padding: 0 2px;
}

.search-input {
  width: calc(100% - 48px); /* Adjust width considering padding and icon */
  padding: 8px 12px 8px 32px;
  border: 1px solid #e5e7eb;
  border-radius: 6px;
  font-size: 13px;
  outline: none;
  transition: all 0.2s;
  background: #f9fafb;
  color: #374151;
}

.search-input::placeholder {
  color: #9ca3af;
}

.search-input:focus {
  background: white;
  border-color: #3b82f6;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

.search-icon {
  position: absolute;
  left: 12px;
  top: 50%;
  transform: translateY(-50%);
  color: #9ca3af;
  width: 16px;
  height: 16px;
  pointer-events: none; /* Make icon non-interactive */
}

#bookmarksList {
  max-height: 400px; /* Adjust as needed */
  overflow-y: auto;
  margin: 0 -16px; /* Counteract body padding */
  padding: 4px 16px 16px; /* Restore padding within the scrollable area */
  /* Add some space if footer exists */
  margin-bottom: 60px; /* Ensure space for fixed footer */
}

.bookmark {
  display: flex;
  gap: 12px;
  padding: 12px;
  border-radius: 8px;
  transition: all 0.2s;
  align-items: center;
  background: white;
  border: 1px solid #f3f4f6;
  margin-bottom: 8px;
  position: relative;
}

.bookmark:hover {
  background: #f9fafb;
  transform: translateY(-1px);
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
}

.timestamp-preview {
  display: none;
  position: absolute;
  bottom: calc(100% + 8px);
  left: 50%;
  transform: translateX(-50%);
  background: rgba(0, 0, 0, 0.8);
  color: white;
  padding: 8px 12px;
  border-radius: 6px;
  font-size: 12px;
  pointer-events: none;
  white-space: nowrap;
  z-index: 1000;
}

.timestamp-preview::after {
  content: '';
  position: absolute;
  top: 100%;
  left: 50%;
  transform: translateX(-50%);
  border-width: 6px;
  border-style: solid;
  border-color: rgba(0, 0, 0, 0.8) transparent transparent transparent;
}

.bookmark:hover .timestamp-preview {
  display: block;
}

.thumbnail-container {
  position: relative;
  width: 120px;
  height: 68px;
  border-radius: 6px;
  overflow: hidden;
  flex-shrink: 0; /* Prevent shrinking */
}

.thumbnail {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: transform 0.3s ease;
  background-color: #e5e7eb; /* Placeholder background */
}

.thumbnail-container:hover .thumbnail {
  transform: scale(1.05);
}

.thumbnail[src]:not([src=""]) {
  background-color: transparent; /* Remove placeholder once loaded */
}

.timestamp-badge {
  position: absolute;
  bottom: 4px;
  right: 4px;
  background: rgba(0, 0, 0, 0.8);
  color: white;
  padding: 2px 6px;
  border-radius: 4px;
  font-size: 11px;
  font-weight: 500;
}

.bookmark-info {
  flex: 1;
  min-width: 0; /* Allow shrinking */
  display: flex;
  justify-content: space-between;
  align-items: flex-start; /* Align items to the top */
  gap: 8px;
}

.bookmark-info > div:first-child {
  flex: 1;
  min-width: 0;
}

.title {
  font-size: 14px;
  font-weight: 500;
  color: #111827;
  margin-bottom: 6px;
  line-height: 1.4;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
  transition: color 0.2s;
  /* Standard property for line clamping */
  line-clamp: 2;
  /* Ensure link takes full width */
  display: block;
}

a {
  text-decoration: none;
  color: inherit;
}

.title:hover {
  color: #1d4ed8;
}

.timestamp-actions {
  display: flex;
  align-items: center;
  gap: 4px;
  flex-shrink: 0; /* Prevent shrinking */
}

.action-btn,
.delete-btn,
.share-btn {
  background: none;
  border: none;
  padding: 4px;
  cursor: pointer;
  color: #6b7280;
  border-radius: 4px;
  transition: all 0.2s;
  display: flex;
  align-items: center;
  justify-content: center;
}

.action-btn svg,
.delete-btn svg,
.share-btn svg {
  display: block;
}

.action-btn:hover,
.delete-btn:hover,
.share-btn:hover {
  color: #111827;
  background: #f3f4f6;
}

.delete-btn:hover {
  color: #dc2626;
  background: #fee2e2;
}

.delete-btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
  background: none;
  color: #9ca3af;
}

.share-btn.shared {
  color: #16a34a;
  background: #dcfce7;
}

.loading-spinner {
  display: none;
}

.delete-btn .loading-spinner {
  width: 14px;
  height: 14px;
}

.animate-spin {
  animation: spin 1s linear infinite;
}

@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

.empty-state,
.loading-state {
  text-align: center;
  padding: 40px 20px;
  color: #6b7280;
  font-size: 14px;
  border-radius: 8px;
  background-color: #f9fafb;
  border: 1px dashed #e5e7eb;
  margin-top: 16px;
}

.footer {
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 12px 16px;
  background: white;
  border-top: 1px solid #e5e7eb;
}

.delete-all-btn {
  padding: 8px 16px;
  border: 1px solid #ef4444;
  background: #fee2e2;
  color: #ef4444;
  border-radius: 6px;
  font-size: 13px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s;
}

.delete-all-btn:hover {
  background: #fecaca;
  border-color: #dc2626;
}

.delete-all-btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
  background: #f3f4f6;
  color: #9ca3af;
  border-color: #e5e7eb;
}

.settings-container {
  display: flex;
  align-items: center;
  gap: 8px;
}

.settings-container label {
  font-size: 13px;
  color: #4b5563;
  user-select: none;
  cursor: pointer;
}

/* Basic toggle switch styling */
.toggle-switch {
  position: relative;
  display: inline-block;
  width: 34px;
  height: 20px;
}

.toggle-switch input {
  opacity: 0;
  width: 0;
  height: 0;
}

.slider {
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: #ccc;
  transition: 0.4s;
  border-radius: 20px;
}

.slider:before {
  position: absolute;
  content: "";
  height: 14px;
  width: 14px;
  left: 3px;
  bottom: 3px;
  background-color: white;
  transition: 0.4s;
  border-radius: 50%;
}

input:checked + .slider {
  background-color: #2563eb;
}

input:checked + .slider:before {
  transform: translateX(14px);
}

/* Notification styles */
#notificationArea {
  position: fixed;
  bottom: 70px; /* Position above footer */
  left: 50%;
  transform: translateX(-50%);
  z-index: 1000;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 8px;
  pointer-events: none; /* Allow clicks through area */
}

.notification {
  background-color: rgba(17, 24, 39, 0.9);
  color: white;
  padding: 10px 16px;
  border-radius: 6px;
  font-size: 13px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  opacity: 0;
  transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;
  visibility: hidden;
  min-width: 180px;
  text-align: center;
  pointer-events: all; /* Make individual notifications clickable */
  transform: translateY(10px);
}

.notification.show {
  opacity: 1;
  visibility: visible;
  transform: translateY(0);
}

.notification.error {
  background-color: rgba(220, 38, 38, 0.9);
}

.notification.with-action {
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 10px;
}

.notification .undo-btn {
  background: rgba(255, 255, 255, 0.2);
  border: none;
  color: white;
  padding: 4px 8px;
  border-radius: 4px;
  cursor: pointer;
  font-size: 12px;
  font-weight: 500;
  transition: background 0.2s;
  margin-left: 10px;
}

.notification .undo-btn:hover {
  background: rgba(255, 255, 255, 0.3);
}

.video-group {
  margin-bottom: 16px;
  border-left: 3px solid transparent; /* Add some spacing and potential indicator */
  padding-left: 8px;
  transition: border-color 0.2s ease;
}

.video-group:hover {
  border-left-color: #e5e7eb;
}

.video-group-title {
  font-size: 15px;
  font-weight: 600;
  color: #374151;
  margin-bottom: 12px;
  margin-top: 0;
  cursor: pointer;
  position: relative;
  padding-right: 20px; /* Space for the indicator */
  transition: color 0.2s ease;
}

.video-group-title a {
  color: inherit;
  text-decoration: none;
}

.video-group-title:hover {
  color: #111827;
}

.video-group-title::after {
  content: '';
  position: absolute;
  right: 0;
  top: 50%;
  width: 0;
  height: 0;
  border-left: 5px solid transparent;
  border-right: 5px solid transparent;
  border-top: 6px solid #6b7280; /* Chevron pointing down (expanded) */
  transform: translateY(-50%);
  transition: transform 0.3s ease, border-top-color 0.2s;
}

.video-group.collapsed .video-group-title::after {
  transform: translateY(-50%) rotate(-90deg); /* Point right when collapsed */
}

.video-group-title:hover::after {
  border-top-color: #111827;
}

.video-group-bookmarks {
  max-height: 1000px; /* Allow for smooth transition */
  overflow: hidden;
  transition: max-height 0.4s ease-in-out, opacity 0.3s ease, visibility 0.3s;
  opacity: 1;
  visibility: visible;
}

.video-group.collapsed .video-group-bookmarks {
  max-height: 0;
  opacity: 0;
  visibility: hidden;
  margin-top: -8px; /* Reduce space below title when collapsed */
  /* Optionally add margin-top: -Npx; if there's unwanted space when collapsed */
}

.video-group-bookmarks .bookmark {
  margin-bottom: 0; /* Remove bottom margin as gap is handled by container */
}

.video-group:last-child {
  margin-bottom: 0;
  border-bottom: none;
  padding-bottom: 5px; /* Less padding for the last group */
}

.video-group-title a {
  text-decoration: none;
  color: inherit;
  transition: color 0.2s;
}

.video-group-title a:hover {
  color: #1d4ed8;
}

/* Notes Textarea Styles */
.notes-container {
  margin-top: 8px;
}

.notes-textarea {
  width: 100%;
  box-sizing: border-box;
  padding: 8px 10px;
  border: 1px solid #e5e7eb;
  border-radius: 4px;
  font-family: inherit;
  font-size: 13px;
  line-height: 1.4;
  resize: none; /* Disable manual resize */
  overflow-y: hidden; /* Hide scrollbar unless needed by auto-resize */
  min-height: 30px; /* Minimum height before expanding */
  background-color: #f9fafb;
  color: #374151;
  transition: border-color 0.2s, background-color 0.2s;
}

.notes-textarea:focus {
  outline: none;
  border-color: #3b82f6;
  background-color: #ffffff;
  box-shadow: 0 0 0 1px #3b82f6;
}

.notes-textarea::placeholder {
  color: #9ca3af;
}

/* Utility Styles */
.hidden {
  display: none;
}

.folder {
  background-color: #fff; /* White background for folders */
  border: 1px solid #ddd;
  border-radius: 4px;
  margin-bottom: 8px; /* Reduced margin */
  box-shadow: 0 1px 2px rgba(0,0,0,0.05); /* Subtle shadow */
}

.folder-header {
  padding: 8px 12px;
  background-color: #e9ecef; /* Light header background */
  cursor: pointer;
  font-weight: bold;
  font-size: 1em; /* Standardized font size */
  color: #495057;
  border-bottom: 1px solid #ddd;
  position: relative; /* For positioning the arrow */
  user-select: none; /* Prevent text selection on click */
}

.folder-header::before {
  content: '▶'; /* Collapsed state: right arrow */
  position: absolute;
  left: 12px;
  font-size: 0.8em;
  transition: transform 0.2s ease-in-out;
  color: #6c757d;
}

.folder-header:not(.collapsed)::before {
  content: '▼'; /* Expanded state: down arrow */
}

.folder-header.collapsed::before {
  /* Keep the right arrow for collapsed state */
  content: '▶';
}

.folder-header span { /* Adjust if title text is wrapped in span */
  margin-left: 20px; /* Space for the arrow */
}

.timestamp-list-container {
  padding: 5px 12px 10px 12px; /* Adjusted padding */
  border-top: none; /* Removed top border as header has bottom border */
  max-height: 300px; /* Limit height for long lists */
  overflow-y: auto; /* Scroll within folder if needed */
}

.timestamp-list-container::-webkit-scrollbar {
  width: 6px;
}

.timestamp-list-container::-webkit-scrollbar-thumb {
  background-color: #ccc;
  border-radius: 3px;
}

.timestamp-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 6px 0; /* Reduced vertical padding */
  border-bottom: 1px solid #eee; /* Lighter separator */
  font-size: 0.9em;
}

.timestamp-item:last-child {
  border-bottom: none;
}

.timestamp-item a {
  color: #007bff;
  text-decoration: none;
  flex-grow: 1;
  margin-right: 10px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis; /* Add ellipsis for long titles */
}

.timestamp-item a:hover {
  text-decoration: underline;
}

.delete-button {
  background: none;
  border: none;
  color: #dc3545; /* Red color for delete */
  cursor: pointer;
  font-size: 1.1em;
  padding: 0 5px;
  line-height: 1;
  opacity: 0.7;
  transition: opacity 0.2s;
}

.delete-button:hover {
  color: #c82333;
  opacity: 1;
}

.no-timestamps-message {
  text-align: center;
  color: #6c757d;
  padding: 20px;
  font-style: italic;
}

body::-webkit-scrollbar {
  width: 8px;
}

body::-webkit-scrollbar-track {
  background: #f1f1f1;
}

body::-webkit-scrollbar-thumb {
  background: #aaa;
  border-radius: 4px;
}

body::-webkit-scrollbar-thumb:hover {
  background: #888;
}
</file>

<file path=".gitignore">
# Dependencies
node_modules/
.pnp.*
.yarn/
bower_components/
jspm_packages/
web_modules/

# Build & Distribution
dist/
build/
out/
.next/
.nuxt/
.vuepress/dist/
.docusaurus/
*.crx
*.pem
*.zip

# Cache & Temporary
.cache/
.temp/
tmp/
temp/
.parcel-cache/
.rpt2_cache/
.rts2_cache*/
.fusebox/
.dynamodb/
.grunt/
.lock-wscript/
.npm/
.eslintcache
.stylelintcache
*.tsbuildinfo

# Test & Coverage
coverage/
.nyc_output/
lib-cov/
*.lcov

# Logs
logs/
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Environment & Secrets
.env*
*.pem

# IDE & Editor
.idea/
.vscode/
*.sublime-*
.project
.classpath
.settings/
*.swp
*.swo
.tern-port

# OS Generated
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
Thumbs.db
ehthumbs.db
Desktop.ini

# Project Specific
resizer.py
tmpsnaiser4.svg

repomix-output.xml
improvements.md
</file>

<file path="package.json">
{
  "dependencies": {
    "pillow": "^0.0.9"
  }
}
</file>

<file path="README.md">
# YouTube Timestamp Bookmarker

A Chrome extension that enhances your YouTube watching experience by letting you save and manage video timestamps with ease. Perfect for students, researchers, content creators, or anyone who needs to reference specific moments in YouTube videos.

## ✨ Features

- 🎯 **Quick Bookmark Button**: Integrated bookmark button in YouTube's video player controls
- ⌨️ **Keyboard Shortcut**: Press 'B' to instantly save timestamps (can be disabled in settings)
- 📋 **Clean Interface**: Intuitive popup interface to manage all your bookmarks
- 🔍 **Smart Search**: Quickly find bookmarks by searching video titles
- 🗂️ **Sorting Options**: Sort bookmarks by newest, oldest, or title
- 🖼️ **Rich Preview**: Video thumbnails and titles for easy reference
- 🔗 **Direct Links**: One-click access to saved timestamps
- 🗑️ **Easy Management**: Delete individual bookmarks or clear all at once
- 💫 **Visual Feedback**: Smooth animations and notifications for all actions

## 🚀 Installation

1. Install from the [Chrome Web Store](link-to-store)
2. The bookmark button (🔖) will appear in YouTube's video player controls
3. Click the button or press 'B' to save timestamps while watching

## 💡 Usage

### Saving Timestamps
- Click the bookmark icon (🔖) in the video player
- Press 'B' on your keyboard (unless disabled)
- A confirmation notification will appear when saved

### Managing Bookmarks
1. Click the extension icon in your Chrome toolbar
2. View all your saved timestamps
3. Search bookmarks using the search bar
4. Sort using the dropdown menu
5. Click timestamps to jump to that moment
6. Delete individual bookmarks or use "Clear All"

### Settings
- Toggle keyboard shortcut (B) on/off
- Settings persist across browser sessions

## 🛠️ Development

### Prerequisites
- Node.js (v14 or higher)
- Bun package manager

### Setup
</file>

<file path="src/styles/globals.css">
/* Design System - Core Variables
-------------------------------------------------- */
:root {
  /* Color System */
  --color-primary-50: #eff6ff;
  --color-primary-100: #dbeafe;
  --color-primary-200: #bfdbfe;
  --color-primary-300: #93c5fd;
  --color-primary-400: #60a5fa;
  --color-primary-500: #3b82f6;
  --color-primary-600: #2563eb;
  --color-primary-700: #1d4ed8;
  --color-primary-800: #1e40af;
  --color-primary-900: #1e3a8a;

  /* Neutral Colors */
  --color-neutral-50: #f8fafc;
  --color-neutral-100: #f1f5f9;
  --color-neutral-200: #e2e8f0;
  --color-neutral-300: #cbd5e1;
  --color-neutral-400: #94a3b8;
  --color-neutral-500: #64748b;
  --color-neutral-600: #475569;
  --color-neutral-700: #334155;
  --color-neutral-800: #1e293b;
  --color-neutral-900: #0f172a;

  /* Semantic Colors */
  --color-success: #10b981;
  --color-warning: #f59e0b;
  --color-error: #ef4444;
  --color-info: #3b82f6;

  /* Theme Tokens */
  --primary-color: var(--color-primary-600);
  --primary-hover: var(--color-primary-700);
  --background-color: var(--color-neutral-50);
  --surface-color: white;
  --surface-color-hover: #f7f7f7;
  --surface-color-active: #e2e2e2;
  --text-primary: var(--color-neutral-900);
  --text-secondary: var(--color-neutral-600);
  --border-color: var(--color-neutral-200);
  --shadow-color: rgba(0, 0, 0, 0.1);

  /* Typography */
  --font-family-base: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif;
  --font-size-xs: 0.75rem;
  --font-size-sm: 0.875rem;
  --font-size-base: 1rem;
  --font-size-lg: 1.125rem;
  --font-size-xl: 1.25rem;
  --font-size-2xl: 1.5rem;
  
  /* Spacing System */
  --space-1: 0.25rem;
  --space-2: 0.5rem;
  --space-3: 0.75rem;
  --space-4: 1rem;
  --space-6: 1.5rem;
  --space-8: 2rem;
  --space-12: 3rem;
  --space-16: 4rem;

  /* Shadows */
  --shadow-sm: 0 1px 2px 0 var(--shadow-color);
  --shadow-md: 0 4px 6px -1px var(--shadow-color);
  --shadow-lg: 0 10px 15px -3px var(--shadow-color);
  --shadow-xl: 0 20px 25px -5px var(--shadow-color);

  /* Border Radius */
  --radius-sm: 0.375rem;
  --radius-md: 0.5rem;
  --radius-lg: 0.75rem;
  --radius-full: 9999px;

  /* Z-index */
  --z-dropdown: 1000;
  --z-sticky: 1020;
  --z-fixed: 1030;
  --z-modal: 1040;
  --z-popover: 1050;
  --z-tooltip: 1060;

  /* Transitions */
  --transition-fast: 150ms cubic-bezier(0.4, 0, 0.2, 1);
  --transition-normal: 200ms cubic-bezier(0.4, 0, 0.2, 1);
  --transition-slow: 300ms cubic-bezier(0.4, 0, 0.2, 1);
}

/* Dark Mode Theme
-------------------------------------------------- */
@media (prefers-color-scheme: dark) {
  :root {
    /* Override theme tokens for dark mode */
    --primary-color: var(--color-primary-400);
    --primary-hover: var(--color-primary-300);
    --background-color: var(--color-neutral-900);
    --surface-color: var(--color-neutral-800);
    --surface-color-hover: var(--color-neutral-700);
    --surface-color-active: var(--color-neutral-600);
    --text-primary: var(--color-neutral-50);
    --text-secondary: var(--color-neutral-400);
    --border-color: var(--color-neutral-700);
    --shadow-color: rgba(0, 0, 0, 0.3);
    
    /* Adjust shadows for dark mode */
    --shadow-sm: 0 1px 2px 0 var(--shadow-color);
    --shadow-md: 0 4px 6px -1px var(--shadow-color);
    --shadow-lg: 0 10px 15px -3px var(--shadow-color);
    
    /* Adjust overlay colors */
    --overlay-background: rgba(0, 0, 0, 0.6);
  }

  /* Dark mode specific component overrides */
  .card {
    background: var(--surface-color);
    border-color: var(--border-color);
  }

  .card:hover {
    background: var(--surface-color-hover);
    border-color: var(--border-color);
    box-shadow: var(--shadow-lg);
  }

  .input {
    background: var(--surface-color);
    border-color: var(--border-color);
    color: var(--text-primary);
  }

  .input:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2);
  }

  .input::placeholder {
    color: var(--text-secondary);
  }

  .bookmark-save-btn {
    background: var(--surface-color);
    border-color: var(--border-color);
    color: var(--text-secondary);
  }

  .bookmark-save-btn:hover {
    background: var(--primary-color);
    border-color: var(--primary-color);
    color: white;
  }

  .modal-overlay {
    background: var(--overlay-background);
    backdrop-filter: blur(8px);
  }

  .modal-content {
    background: var(--surface-color);
    border: 1px solid var(--border-color);
  }

  .toast {
    background: var(--surface-color);
    border: 1px solid var(--border-color);
    box-shadow: var(--shadow-lg);
  }

  .dropdown-content {
    background: var(--surface-color);
    border-color: var(--border-color);
    box-shadow: var(--shadow-lg);
  }

  .dropdown-item:hover {
    background: var(--surface-color-hover);
  }

  .tooltip::before {
    background: var(--surface-color);
    border: 1px solid var(--border-color);
    color: var(--text-primary);
  }

  .tag {
    background: var(--surface-color);
    border-color: var(--border-color);
  }

  .tag:hover {
    background: var(--primary-color);
    border-color: var(--primary-color);
  }

  /* Skeleton loading in dark mode */
  .skeleton {
    background: linear-gradient(
      90deg,
      var(--surface-color) 25%,
      var(--surface-color-hover) 50%,
      var(--surface-color) 75%
    );
  }

  /* Scrollbar dark mode */
  *::-webkit-scrollbar-thumb {
    background-color: var(--color-neutral-600);
  }

  *::-webkit-scrollbar-thumb:hover {
    background-color: var(--color-neutral-500);
  }

  /* Progress bar dark mode */
  .progress-bar {
    background: var(--surface-color-hover);
  }

  /* Code blocks and pre elements */
  pre, code {
    background: var(--surface-color-hover);
    border-color: var(--border-color);
  }
}

/* Smooth theme transitions */
body * {
  transition: background-color 200ms ease,
              border-color 200ms ease,
              color 200ms ease,
              box-shadow 200ms ease;
}

/* Base Styles
-------------------------------------------------- */
*, *::before, *::after {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

html {
  font-size: 16px;
  -webkit-text-size-adjust: 100%;
  font-feature-settings: "cv02", "cv03", "cv04", "cv11";
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

body {
  font-family: var(--font-family-base);
  font-size: var(--font-size-base);
  line-height: 1.5;
  color: var(--text-primary);
  background-color: var(--background-color);
  transition: background-color var(--transition-normal),
              color var(--transition-normal);
}

/* Layout & Grid
-------------------------------------------------- */
.container {
  width: 100%;
  margin-inline: auto;
  padding-inline: var(--space-4);
  max-width: min(100% - 2rem, 80rem);
}

.grid {
  display: grid;
  gap: var(--space-4);
}

@media (min-width: 640px) {
  .grid {
    grid-template-columns: repeat(auto-fit, minmax(min(100%, 300px), 1fr));
  }
}

/* Typography
-------------------------------------------------- */
h1, h2, h3, h4, h5, h6 {
  line-height: 1.2;
  color: var(--text-primary);
  font-weight: 600;
}

h1 { font-size: var(--font-size-2xl); }
h2 { font-size: var(--font-size-xl); }
h3 { font-size: var(--font-size-lg); }

/* Components
-------------------------------------------------- */
.bookmark-save-btn {
  background: var(--surface-color);
  border: 1px solid var(--border-color);
  padding: 0 var(--space-md);
  border-radius: var(--radius-sm);
  display: flex;
  align-items: center;
  gap: var(--space-sm);
  color: var(--text-secondary);
  transition: all var(--transition-normal);
  height: 36px;
  margin-right: var(--space-md);
  font-size: 14px;
  font-weight: 500;
  cursor: pointer;
  user-select: none;
}

.bookmark-save-btn:hover {
  background: var(--primary-color);
  color: white;
  border-color: var(--primary-color);
  box-shadow: var(--shadow-sm);
  transform: translateY(-1px);
}

.bookmark-save-btn:active {
  transform: scale(0.98) translateY(0);
}

.bookmark-save-btn svg {
  width: 16px;
  height: 16px;
  transition: transform var(--transition-fast);
}

.bookmark-save-btn:hover svg {
  color: white;
  transform: scale(1.1);
}

.video-controls-right {
  display: flex;
  align-items: center;
  gap: var(--space-md);
  padding: var(--space-sm) var(--space-md);
  background: rgba(var(--surface-color), 0.8);
  backdrop-filter: blur(8px);
  -webkit-backdrop-filter: blur(8px);
  border-radius: var(--radius-md);
  box-shadow: var(--shadow-md);
  transition: all var(--transition-normal);
}

@media (hover: hover) {
  .video-controls-right:hover {
    background: rgba(var(--surface-color), 0.9);
    transform: translateY(-2px);
    box-shadow: var(--shadow-lg);
  }
}

@media (max-width: 768px) {
  .video-controls-right {
    gap: var(--space-sm);
    padding: var(--space-xs) var(--space-sm);
  }
  
  .bookmark-save-btn {
    height: 32px;
    padding: 0 var(--space-sm);
    font-size: 13px;
  }
}

.card {
  background: var(--surface-color);
  border-radius: var(--radius-md);
  padding: var(--space-md);
  border: 1px solid var(--border-color);
  transition: var(--transition-normal);
}

.card:hover {
  transform: translateY(-2px);
  box-shadow: 0 12px 24px -10px rgba(0, 0, 0, 0.1);
}

.input {
  background: var(--background-color);
  border: 1px solid var(--border-color);
  border-radius: var(--radius-sm);
  padding: var(--space-sm) var(--space-md);
  color: var(--text-primary);
  font-size: 14px;
  transition: var(--transition-normal);
}

.input:focus {
  border-color: var(--primary-color);
  box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
  outline: none;
}

.input::placeholder {
  color: var(--text-secondary);
}

.modal-overlay {
  position: fixed;
  inset: 0;
  background: rgba(0, 0, 0, 0.4);
  backdrop-filter: blur(4px);
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0;
  transition: opacity var(--transition-normal);
}

.modal-overlay.active {
  opacity: 1;
}

.modal-content {
  background: var(--background-color);
  border-radius: var(--radius-md);
  padding: var(--space-lg);
  max-width: 500px;
  width: 90%;
  position: relative;
  transform: translateY(20px);
  opacity: 0;
  transition: all var(--transition-normal);
}

.modal-overlay.active .modal-content {
  transform: translateY(0);
  opacity: 1;
}

.toast {
  position: fixed;
  bottom: var(--space-lg);
  right: var(--space-lg);
  background: var(--surface-color);
  border-radius: var(--radius-sm);
  padding: var(--space-sm) var(--space-md);
  box-shadow: var(--shadow-md);
  display: flex;
  align-items: center;
  gap: var(--space-sm);
  transform: translateX(120%);
  transition: transform var(--transition-normal);
}

.toast.show {
  transform: translateX(0);
}

.progress-bar {
  width: 100%;
  height: 4px;
  background: var(--border-color);
  border-radius: 2px;
  overflow: hidden;
}

.progress-bar-fill {
  height: 100%;
  background: var(--primary-color);
  transform-origin: left;
  animation: progress-fill var(--transition-slow) ease-out;
}

@keyframes progress-fill {
  from { transform: scaleX(0); }
  to { transform: scaleX(1); }
}

.skeleton {
  background: linear-gradient(
    90deg,
    var(--surface-color) 25%,
    var(--border-color) 50%,
    var(--surface-color) 75%
  );
  background-size: 200% 100%;
  animation: shimmer 1.5s infinite;
  border-radius: var(--radius-sm);
}

.page-transition {
  opacity: 0;
  transform: translateY(20px);
  transition: all var(--transition-normal);
}

.page-transition.enter {
  opacity: 1;
  transform: translateY(0);
}

.pulse {
  position: relative;
}

.pulse::after {
  content: '';
  position: absolute;
  inset: 0;
  border-radius: inherit;
  background: var(--primary-color);
  opacity: 0.5;
  transform: scale(1.2);
  animation: pulse 1.5s ease-out infinite;
}

@keyframes pulse {
  0% {
    transform: scale(1);
    opacity: 0.5;
  }
  100% {
    transform: scale(1.5);
    opacity: 0;
  }
}

.tooltip {
  position: relative;
  display: inline-block;
}

.tooltip::before {
  content: attr(data-tooltip);
  position: absolute;
  bottom: 100%;
  left: 50%;
  transform: translateX(-50%) translateY(-4px);
  padding: var(--space-xs) var(--space-sm);
  background: var(--text-primary);
  color: var(--background-color);
  font-size: 12px;
  border-radius: var(--radius-sm);
  white-space: nowrap;
  opacity: 0;
  visibility: hidden;
  transition: all var(--transition-fast);
}

.tooltip:hover::before {
  opacity: 1;
  visibility: visible;
  transform: translateX(-50%) translateY(-8px);
}

.tag {
  display: inline-flex;
  align-items: center;
  padding: 2px var(--space-sm);
  background: var(--surface-color);
  border: 1px solid var(--border-color);
  border-radius: 12px;
  font-size: 12px;
  color: var(--text-secondary);
  transition: var(--transition-normal);
}

.tag:hover {
  background: var(--primary-color);
  color: white;
  border-color: var(--primary-color);
}

.dropdown {
  position: relative;
}

.dropdown-content {
  position: absolute;
  top: 100%;
  right: 0;
  background: var(--background-color);
  border: 1px solid var(--border-color);
  border-radius: var(--radius-md);
  padding: var(--space-xs);
  min-width: 180px;
  box-shadow: var(--shadow-md);
  opacity: 0;
  visibility: hidden;
  transform: translateY(4px);
  transition: all var(--transition-normal);
}

.dropdown.active .dropdown-content {
  opacity: 1;
  visibility: visible;
  transform: translateY(8px);
}

.dropdown-item {
  display: flex;
  align-items: center;
  gap: var(--space-sm);
  padding: var(--space-sm) var(--space-md);
  color: var(--text-primary);
  border-radius: var(--radius-sm);
  transition: var(--transition-fast);
  cursor: pointer;
}

.dropdown-item:hover {
  background: var(--surface-color);
}

/* Utilities
-------------------------------------------------- */
.visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border-width: 0;
}

.truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/* Print Styles
-------------------------------------------------- */
@media print {
  * {
    background: transparent !important;
    color: #000 !important;
    box-shadow: none !important;
    text-shadow: none !important;
  }

  a, a:visited {
    text-decoration: underline;
  }

  pre, blockquote {
    border: 1px solid #999;
    page-break-inside: avoid;
  }

  thead {
    display: table-header-group;
  }

  tr, img {
    page-break-inside: avoid;
  }

  img {
    max-width: 100% !important;
  }

  @page {
    margin: 0.5cm;
  }

  p, h2, h3 {
    orphans: 3;
    widows: 3;
  }

  h2, h3 {
    page-break-after: avoid;
  }
}

/* Performance Optimizations
-------------------------------------------------- */
@media (prefers-reduced-motion: reduce) {
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

/* Focus Styles
-------------------------------------------------- */
:focus-visible {
  outline: 2px solid var(--primary-color);
  outline-offset: 2px;
  border-radius: var(--radius-sm);
}

*:focus {
  outline: none;
}

/* Scrollbar Styles
-------------------------------------------------- */
* {
  scrollbar-width: thin;
  scrollbar-color: var(--color-neutral-300) transparent;
}

*::-webkit-scrollbar {
  width: 6px;
  height: 6px;
}

*::-webkit-scrollbar-track {
  background: transparent;
}

*::-webkit-scrollbar-thumb {
  background-color: var(--color-neutral-300);
  border-radius: var(--radius-full);
}

*::-webkit-scrollbar-thumb:hover {
  background-color: var(--color-neutral-400);
}
</file>

<file path="manifest.json">
{
  "manifest_version": 3,
  "name": "YouTube Timestamp Bookmarker",
  "version": "1.0",
  "description": "Save and manage YouTube video timestamps with ease",
  "permissions": [
    "storage",
    "activeTab",
    "alarms"
  ],
  "host_permissions": [
    "*://*.youtube.com/*"
  ],
  "action": {
    "default_popup": "popup.html"
  },
  "background": {
    "service_worker": "background.js",
    "type": "module"
  },
  "content_scripts": [
    {
      "matches": ["*://*.youtube.com/*"],
      "js": ["content.js"],
      "css": ["content.css"],
      "run_at": "document_idle"
    }
  ],
  "icons": {
    "16": "icons/icon_16.png",
    "32": "icons/icon_32.png",
    "48": "icons/icon_48.png",
    "128": "icons/icon_128.png"
  }
}
</file>

<file path="background.js">
// Initialize storage
chrome.runtime.onInstalled.addListener(() => {
  chrome.storage.sync.get(['bookmarks', 'shortcutEnabled'], (result) => {
    if (!result.bookmarks) {
      chrome.storage.sync.set({ bookmarks: [] }, () => {
        console.log('Bookmark storage initialized');
      });
    }
    // Ensure shortcutEnabled has a default value (true)
    if (typeof result.shortcutEnabled === 'undefined') {
      chrome.storage.sync.set({ shortcutEnabled: true }, () => {
          console.log('Shortcut setting initialized');
      });
    }
  });
  // Create the alarm when the extension is installed or updated
  chrome.alarms.create('keepAlive', { periodInMinutes: 0.5 }); // Run every 30 seconds
});

// Listener for the alarm
chrome.alarms.onAlarm.addListener((alarm) => {
  if (alarm.name === 'keepAlive') {
    // Perform a minimal operation to keep the service worker alive, e.g., check storage
    chrome.storage.sync.get(null, (items) => {
      if (chrome.runtime.lastError) {
        console.log('Keep-alive check failed:', chrome.runtime.lastError);
      } else {
        // Optional: log successful keep-alive check
        // console.log('Keep-alive check successful.');
      }
    });
  }
});

// Handle messages from content script
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  console.log('Received message:', request);

  if (request.type === 'ADD_BOOKMARK') {
    handleAddBookmark(request.data, sendResponse);
    return true; // Will respond asynchronously
  }
});

// Handle adding a bookmark
async function handleAddBookmark(bookmarkData, sendResponse) {
  if (!bookmarkData || !bookmarkData.videoId || typeof bookmarkData.timestamp === 'undefined') {
    console.error('Invalid bookmark data:', bookmarkData);
    sendResponse({ success: false, error: 'Invalid bookmark data' });
    return;
  }

  // Create a unique ID for the bookmark
  const bookmarkId = `${bookmarkData.videoId}_${bookmarkData.timestamp}`;

  try {
    const result = await chrome.storage.sync.get('bookmarks');
    const bookmarks = result.bookmarks || [];

    // Check if a bookmark with the exact same ID already exists
    const existingIndex = bookmarks.findIndex((b) => b.id === bookmarkId);

    if (existingIndex >= 0) {
      // Bookmark for this exact video and timestamp already exists
      console.log('Bookmark already exists:', bookmarkId);
      sendResponse({ success: false, error: 'Bookmark already exists' });
      return; // Don't add duplicates
    } else {
      // Add new bookmark with unique ID
      const newBookmark = {
        ...bookmarkData,
        id: bookmarkId, // Store the unique ID
        createdAt: Date.now(), // Keep track of creation time
        notes: '', // Add an empty notes field
      };
      bookmarks.push(newBookmark);
      console.log('Added new bookmark:', newBookmark);
    }

    // Save updated bookmarks
    await chrome.storage.sync.set({ bookmarks });
    console.log('Bookmark saved successfully');
    sendResponse({ success: true });
  } catch (error) {
    console.error('Error processing bookmark:', error);
    sendResponse({
      success: false,
      error: error.message,
    });
  }
}

// Handle service worker lifecycle
self.addEventListener('activate', (event) => {
  event.waitUntil(async () => {
    // Take control of all clients
    await clients.claim();
    console.log('Service worker activated and claimed clients');
  });
});
</file>

<file path="content.js">
// YouTube Timestamp Bookmarker Extension
console.log('Timpstamp Extension Loaded');

let currentVideoId = null;
let shortcutEnabled = true; // Default to enabled, will be updated from storage

// Function to load initial shortcut setting
function loadShortcutSetting() {
  chrome.storage.sync.get('shortcutEnabled', (result) => {
    shortcutEnabled = result.shortcutEnabled !== false; // Default true if undefined
    console.log('Shortcut setting loaded:', shortcutEnabled);
  });
}

// Listen for changes in storage (e.g., when changed via popup)
chrome.storage.onChanged.addListener((changes, namespace) => {
  if (namespace === 'sync' && changes.shortcutEnabled) {
    shortcutEnabled = changes.shortcutEnabled.newValue !== false;
    console.log('Shortcut setting updated:', shortcutEnabled);
  }
});

// Save timestamp
function saveTimestamp() {
  try {
    const video = document.querySelector('video');
    if (!video) {
      showNotification('Error: Video not found');
      return;
    }

    const videoId = new URLSearchParams(window.location.search).get('v');
    if (!videoId) {
      showNotification('Error: Video ID not found');
      return;
    }

    const currentTime = Math.floor(video.currentTime);
    const hours = Math.floor(currentTime / 3600);
    const minutes = Math.floor((currentTime % 3600) / 60);
    const seconds = currentTime % 60;

    // More robust title extraction
    let videoTitle = 'Unknown Title';
    const titleElement = document.querySelector(
        'h1.ytd-watch-metadata yt-formatted-string#title, ' + // Refined primary selector
        'h1.title.ytd-video-primary-info-renderer yt-formatted-string, ' + // Refined secondary selector
        '#container > h1.title > yt-formatted-string' // Common alternative structure
    );
    if (titleElement && titleElement.textContent) {
      videoTitle = titleElement.textContent.trim();
    } else {
      // Fallback to document title if specific element not found
      if (document.title.endsWith(' - YouTube')) {
          videoTitle = document.title.substring(0, document.title.length - ' - YouTube'.length).trim();
      } else {
          videoTitle = document.title.trim(); // Use the full title if it doesn't end as expected
      }
      console.warn('Could not find specific title element, using document.title as fallback.');
    }

    const formattedTime =
      hours > 0
        ? `${hours}:${minutes.toString().padStart(2, '0')}:${seconds
            .toString()
            .padStart(2, '0')}`
        : `${minutes}:${seconds.toString().padStart(2, '0')}`;

    const bookmark = {
      videoId,
      videoTitle: videoTitle,
      timestamp: currentTime,
      formattedTime,
      url: `https://youtube.com/watch?v=${videoId}&t=${currentTime}s`,
      savedAt: Date.now(),
    };

    chrome.runtime.sendMessage(
      {
        type: 'ADD_BOOKMARK',
        data: bookmark,
      },
      (response) => {
        if (chrome.runtime.lastError) {
          console.error('Failed to save bookmark:', chrome.runtime.lastError);
          showNotification('Failed to save timestamp ❌');
          return;
        }

        if (response && response.success) {
          showNotification('Timestamp saved! 🎉');
        } else {
          showNotification('Failed to save timestamp ❌');
        }
      }
    );
  } catch (error) {
    console.error('Error saving timestamp:', error);
    showNotification('Failed to save timestamp ❌');
  }
}

// Show notification
function showNotification(message) {
  try {
    const existing = document.querySelector('.ytb-notification'); // Use new class
    if (existing) {
      existing.remove();
    }

    const notification = document.createElement('div');
    notification.className = 'ytb-notification'; // Use new class
    notification.textContent = message;
    // Styles are now applied via content.css

    document.body.appendChild(notification);
    setTimeout(() => {
      if (notification.parentNode) {
        notification.remove();
      }
    }, 3000);
  } catch (error) {
    console.error('Error showing notification:', error);
  }
}

// Create bookmark button
function createButton() {
  const button = document.createElement('button');
  button.className = 'ytp-button ytb-bookmark-btn'; // Use new class
  button.title = 'Save timestamp (B)';
  button.innerHTML = `
        <svg height="100%" version="1.1" viewBox="0 0 24 24" width="100%">
            <path d="M17 3H7c-1.1 0-2 .9-2 2v16l7-3 7 3V5c0-1.1-.9-2-2-2z" fill="currentColor"/>
        </svg>
    `;

  button.addEventListener('click', (e) => {
    e.preventDefault();
    e.stopPropagation();
    saveTimestamp();
  });

  return button;
}

// Add bookmark button to player
function addBookmarkButton() {
  try {
    if (document.querySelector('.ytb-bookmark-btn')) return;

    const rightControls = document.querySelector('.ytp-right-controls');
    if (!rightControls) return;

    const button = createButton();
    rightControls.insertBefore(button, rightControls.firstChild);
    console.log('Bookmark button added');
  } catch (error) {
    console.error('Error adding bookmark button:', error);
  }
}

// Handle keyboard shortcut
function handleKeyPress(event) {
  try {
    // Check if shortcut is enabled
    if (!shortcutEnabled) return;

    if (
      event.target.tagName === 'INPUT' ||
      event.target.tagName === 'TEXTAREA' ||
      event.target.isContentEditable
    ) {
      return;
    }

    if (
      event.key.toLowerCase() === 'b' &&
      !event.ctrlKey &&
      !event.altKey &&
      !event.metaKey &&
      !event.shiftKey
    ) {
      event.preventDefault();
      event.stopPropagation();
      saveTimestamp();
    }
  } catch (error) {
    console.error('Error handling keyboard shortcut:', error);
  }
}

// Initialize extension
function initialize() {
  try {
    console.log('Initializing extension...');

    // Load initial shortcut setting
    loadShortcutSetting();

    const videoId = new URLSearchParams(window.location.search).get('v');
    if (!videoId || videoId === currentVideoId) return;

    console.log('New video detected:', videoId);
    currentVideoId = videoId;

    const existingButton = document.querySelector('.ytb-bookmark-btn');
    if (existingButton) {
      existingButton.remove();
    }

    addBookmarkButton();
  } catch (error) {
    console.error('Error initializing extension:', error);
  }
}

// Set up observers and event listeners
try {
  // Watch for player changes
  const observer = new MutationObserver(() => {
    try {
      if (!document.querySelector('.ytb-bookmark-btn')) {
        const controls = document.querySelector('.ytp-right-controls');
        if (controls) {
          addBookmarkButton();
        }
      }
    } catch (error) {
      console.error('Error in mutation observer:', error);
    }
  });

  observer.observe(document.body, {
    childList: true,
    subtree: true,
  });

  // Add event listeners
  document.addEventListener('keydown', handleKeyPress, true);
  window.addEventListener('yt-navigate-finish', initialize);
  window.addEventListener('load', initialize);

  // Initial setup
  console.log('Running initial setup...');
  initialize();
} catch (error) {
  console.error('Error setting up extension:', error);
}
</file>

<file path="popup.html">
<!DOCTYPE html>
<html>
  <head>
    <style>
      body {
        width: 420px;
        min-width: 420px;
        padding: 16px;
        font-family: system-ui, -apple-system, sans-serif;
        margin: 0;
        background: #ffffff;
        color: #1f2937;
      }

      .header {
        display: flex;
        flex-direction: column;
        gap: 12px;
        margin-bottom: 16px;
      }

      .header-top {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0 4px;
      }

      h2 {
        font-size: 18px;
        margin: 0;
        color: #111827;
        font-weight: 600;
        white-space: nowrap;
        flex-shrink: 0;
      }

      .header-controls {
        display: flex;
        align-items: center;
        gap: 8px;
      }

      .sort-select {
        padding: 6px 28px 6px 12px;
        border: 1px solid #e5e7eb;
        border-radius: 6px;
        font-size: 13px;
        outline: none;
        background: white;
        cursor: pointer;
        color: #374151;
        appearance: none;
        background-image: url('data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20fill%3D%22%23374151%22%20d%3D%22M287%2069.4a17.6%2017.6%200%200%200-13-5.4H18.4c-5%200-9.3%201.8-12.9%205.4A17.6%2017.6%200%200%200%200%2082.2c0%205%201.8%209.3%205.4%2012.9l128%20127.9c3.6%203.6%207.8%205.4%2012.8%205.4s9.2-1.8%2012.8-5.4L287%2095c3.5-3.5%205.4-7.8%205.4-12.8%200-5-1.9-9.2-5.4-12.8z%22%2F%3E%3C%2Fsvg%3E');
        background-repeat: no-repeat;
        background-position: right 8px center;
        background-size: 8px auto;
        width: 110px;
      }

      .sort-select:hover {
        border-color: #d1d5db;
      }

      .search-container {
        position: relative;
        margin-bottom: 16px;
        padding: 0 2px;
      }

      .search-input {
        width: calc(100% - 48px);
        padding: 8px 12px 8px 32px;
        border: 1px solid #e5e7eb;
        border-radius: 6px;
        font-size: 13px;
        outline: none;
        transition: all 0.2s;
        background: #f9fafb;
        color: #374151;
      }

      .search-input::placeholder {
        color: #9ca3af;
      }

      .search-input:focus {
        background: white;
        border-color: #3b82f6;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
      }

      .search-icon {
        position: absolute;
        left: 12px;
        top: 50%;
        transform: translateY(-50%);
        color: #9ca3af;
        width: 16px;
        height: 16px;
      }

      .bookmark {
        display: flex;
        gap: 12px;
        padding: 12px;
        border-radius: 8px;
        transition: all 0.2s;
        align-items: center;
        background: white;
        border: 1px solid #f3f4f6;
        margin-bottom: 8px;
        position: relative;
      }

      .bookmark:hover {
        background: #f9fafb;
        transform: translateY(-1px);
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
      }

      .timestamp-preview {
        display: none;
        position: absolute;
        bottom: calc(100% + 8px);
        left: 50%;
        transform: translateX(-50%);
        background: rgba(0, 0, 0, 0.8);
        color: white;
        padding: 8px 12px;
        border-radius: 6px;
        font-size: 12px;
        pointer-events: none;
        white-space: nowrap;
        z-index: 1000;
      }

      .timestamp-preview::after {
        content: '';
        position: absolute;
        top: 100%;
        left: 50%;
        transform: translateX(-50%);
        border-width: 6px;
        border-style: solid;
        border-color: rgba(0, 0, 0, 0.8) transparent transparent transparent;
      }

      .bookmark:hover .timestamp-preview {
        display: block;
      }

      .thumbnail-container {
        position: relative;
        width: 120px;
        height: 68px;
        border-radius: 6px;
        overflow: hidden;
      }

      .thumbnail {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
      }

      .thumbnail-container:hover .thumbnail {
        transform: scale(1.05);
      }

      .timestamp-badge {
        position: absolute;
        bottom: 4px;
        right: 4px;
        background: rgba(0, 0, 0, 0.8);
        color: white;
        padding: 2px 6px;
        border-radius: 4px;
        font-size: 11px;
        font-weight: 500;
      }

      .bookmark-info {
        flex: 1;
        min-width: 0;
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        gap: 8px;
      }

      .title {
        font-size: 14px;
        font-weight: 500;
        color: #111827;
        margin-bottom: 6px;
        line-height: 1.4;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
      }

      .timestamp {
        color: #6b7280;
        font-size: 13px;
        display: flex;
        align-items: center;
        gap: 4px;
        padding: 4px 8px;
        background: #f3f4f6;
        border-radius: 4px;
        font-weight: 500;
      }

      .delete-btn {
        padding: 6px;
        color: #6b7280;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.2s;
        background: transparent;
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0.6;
      }

      .bookmark:hover .delete-btn {
        opacity: 1;
      }

      .delete-btn:hover {
        background: #fee2e2;
        color: #dc2626;
      }

      .delete-all-btn {
        padding: 6px 12px;
        font-size: 13px;
        color: #dc2626;
        border: 1px solid #fecaca;
        border-radius: 6px;
        background: transparent;
        cursor: pointer;
        transition: all 0.2s;
        display: flex;
        align-items: center;
        gap: 6px;
        font-weight: 500;
        white-space: nowrap;
        height: 32px;
        min-width: 90px;
      }

      .delete-all-btn:hover:not(:disabled) {
        background: #fee2e2;
      }

      .delete-all-btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
        border-color: #e5e7eb;
        color: #9ca3af;
      }

      .bookmarks-container {
        max-height: 460px;
        overflow-y: auto;
        margin: 0 -16px;
        padding: 0 16px;
        scrollbar-gutter: stable;
      }

      .bookmarks-container::-webkit-scrollbar {
        width: 6px;
      }

      .bookmarks-container::-webkit-scrollbar-track {
        background: transparent;
      }

      .bookmarks-container::-webkit-scrollbar-thumb {
        background: #e5e7eb;
        border-radius: 3px;
      }

      .bookmarks-container::-webkit-scrollbar-thumb:hover {
        background: #d1d5db;
      }

      .empty-state {
        text-align: center;
        color: #6b7280;
        padding: 32px 24px;
        background: #f9fafb;
        border-radius: 12px;
        border: 1px dashed #e5e7eb;
        font-size: 14px;
        margin: 16px 0;
      }

      .settings {
        padding: 12px;
        background: #f9fafb;
        border-radius: 6px;
        border: 1px solid #e5e7eb;
      }

      .toggle-label {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 13px;
        color: #374151;
        cursor: pointer;
        user-select: none;
      }

      .keyboard-shortcut {
        background: #f3f4f6;
        padding: 2px 6px;
        border-radius: 4px;
        font-family: ui-monospace, SFMono-Regular, Menlo, monospace;
        font-size: 12px;
        color: #4b5563;
        border: 1px solid #e5e7eb;
        margin-left: 4px;
      }

      input[type='checkbox'] {
        accent-color: #3b82f6;
        width: 16px;
        height: 16px;
        border-radius: 4px;
        cursor: pointer;
      }

      a {
        text-decoration: none;
        color: inherit;
      }

      a:hover .title {
        color: #3b82f6;
      }

      .timestamp-actions {
        display: flex;
        gap: 4px;
        margin-top: 8px;
      }

      .share-btn,
      .delete-btn {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 6px;
        border: none;
        background: #f3f4f6;
        border-radius: 6px;
        cursor: pointer;
        color: #4b5563;
        transition: all 0.2s;
      }

      .share-btn:hover {
        background: #e5e7eb;
        color: #1a73e8;
      }

      .delete-btn:hover {
        background: #fee2e2;
        color: #dc2626;
      }

      .timestamp-actions button svg {
        width: 16px;
        height: 16px;
      }

      .share-btn {
        padding: 4px;
        color: #6b7280;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.2s;
        background: transparent;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .share-btn:hover {
        background: #f3f4f6;
        color: #3b82f6;
      }

      .share-btn.shared {
        color: #16a34a;
        background: #dcfce7;
        transform: scale(1.1);
      }

      .notification {
        position: fixed;
        bottom: 16px;
        left: 50%;
        transform: translateX(-50%);
        padding: 8px 16px;
        border-radius: 6px;
        font-size: 13px;
        color: white;
        animation: slideUp 0.3s ease-out;
        z-index: 1000;
        background: rgba(0, 0, 0, 0.8);
        backdrop-filter: blur(4px);
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1),
          0 2px 4px -1px rgba(0, 0, 0, 0.06);
      }

      .notification.with-action {
        display: flex;
        align-items: center;
        gap: 12px;
        padding-right: 8px;
      }

      .notification .undo-btn {
        background: rgba(255, 255, 255, 0.2);
        border: none;
        padding: 4px 8px;
        border-radius: 4px;
        color: white;
        font-size: 12px;
        cursor: pointer;
        transition: all 0.2s;
      }

      .notification .undo-btn:hover {
        background: rgba(255, 255, 255, 0.3);
      }

      .delete-btn {
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 28px;
        height: 28px;
        border-radius: 6px;
        border: none;
        background: transparent;
        color: #6b7280;
        cursor: pointer;
        transition: all 0.2s;
      }

      .delete-btn:disabled {
        cursor: not-allowed;
        opacity: 0.5;
      }

      .delete-btn:not(:disabled):hover {
        background: #fee2e2;
        color: #dc2626;
      }

      .loading-spinner {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
      }

      @keyframes spin {
        from {
          transform: rotate(0deg);
        }
        to {
          transform: rotate(360deg);
        }
      }

      .animate-spin {
        animation: spin 1s linear infinite;
      }

      .delete-icon,
      .loading-spinner {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 14px;
        height: 14px;
      }

      .loading-spinner circle {
        opacity: 0.25;
      }

      .loading-spinner path {
        opacity: 0.75;
      }

      @keyframes slideUp {
        from {
          transform: translate(-50%, 20px);
          opacity: 0;
        }
        to {
          transform: translate(-50%, 0);
          opacity: 1;
        }
      }

      @keyframes fadeOut {
        from {
          opacity: 1;
        }
        to {
          opacity: 0;
        }
      }

      .fade-out {
        animation: fadeOut 0.3s ease-out forwards;
      }

      kbd {
        background-color: #f8f9fa;
        border: 1px solid #d1d5db;
        border-radius: 3px;
        box-shadow: 0 1px 1px rgba(0, 0, 0, 0.2);
        color: #333;
        display: inline-block;
        font-family: -apple-system, system-ui, 'Segoe UI', Helvetica, Arial,
          sans-serif;
        font-size: 0.9em;
        line-height: 1;
        padding: 2px 5px;
        margin: 0 2px;
        vertical-align: middle;
      }
    </style>
    <title>YouTube Timestamp Bookmarker</title>
  </head>
  <body>
    <div class="header">
      <div class="header-top">
        <h2>YouTube Timestamps</h2>
        <div class="header-controls">
          <select id="sortSelect" class="sort-select" title="Sort bookmarks">
            <option value="newest">Sort: Newest</option>
            <option value="oldest">Sort: Oldest</option>
            <option value="title">Sort: Title (A-Z)</option>
          </select>
          <button id="deleteAllBtn" class="delete-all-btn">
            <svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor">
              <path
                d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"
              />
            </svg>
            Clear All
          </button>
        </div>
      </div>
      <div class="settings">
        <label class="toggle-label">
          <input type="checkbox" id="shortcutToggle" />
          Enable keyboard shortcut <kbd>B</kbd>
        </label>
      </div>
    </div>

    <div class="search-container">
      <svg class="search-icon" viewBox="0 0 24 24" fill="currentColor">
        <path
          d="M15.5 14h-.79l-.28-.27A6.471 6.471 0 0 0 16 9.5 6.5 6.5 0 1 0 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"
        />
      </svg>
      <input
        type="text"
        id="searchInput"
        class="search-input"
        placeholder="Search your timestamps..."
      />
    </div>

    <div class="bookmarks-container">
      <div id="bookmarksList">
        <div class="loading-state" id="loadingState" style="display: block;">
          Loading bookmarks...
        </div>
        <div class="empty-state" id="emptyState" style="display: none;">
          No bookmarks yet. Add some from YouTube!
        </div>
        <!-- Bookmarks will be injected here -->
      </div>
    </div>
    <script type="module" src="popup.js"></script>
  </body>
</html>
</file>

<file path="popup.js">
import {
  debounce,
  formatTime,
  showNotification,
  setupLazyLoading,
} from './src/utils.js';

document.addEventListener('DOMContentLoaded', () => {
  const bookmarksList = document.getElementById('bookmarksList');
  const deleteAllBtn = document.getElementById('deleteAllBtn');
  const searchInput = document.getElementById('searchInput');
  const shortcutToggle = document.getElementById('shortcutToggle');
  const sortSelect = document.getElementById('sortSelect');
  const loadingState = document.getElementById('loadingState');
  const emptyState = document.getElementById('emptyState');
  const notificationArea = document.getElementById('notificationArea');
  let allBookmarks = []; // Store all bookmarks for filtering
  let currentSort = 'newest'; // Keep track of the current sort
  const lazyLoadObserver = setupLazyLoading(); // Initialize the observer

  // Key for storing folder collapsed states
  const FOLDER_STATE_KEY = 'folderCollapsedStates';

  // Load shortcut setting
  chrome.storage.sync.get(['bookmarks', 'shortcutEnabled'], (result) => {
    shortcutToggle.checked = result.shortcutEnabled !== false; // Default to true
    allBookmarks = result.bookmarks || [];
    // Hide loading state and show bookmarks/empty state
    loadingState.style.display = 'none';
    filterBookmarks(searchInput.value);
  });

  // Save shortcut setting
  shortcutToggle.addEventListener('change', (e) => {
    chrome.storage.sync.set({ shortcutEnabled: e.target.checked });
  });

  // --- Grouping Logic ---
  function groupBookmarksByVideo(bookmarks) {
    const grouped = bookmarks.reduce((acc, bookmark) => {
      const { videoId, videoTitle } = bookmark;
      if (!acc[videoId]) {
        acc[videoId] = {
          title: videoTitle || 'Unknown Title', // Use stored title
          bookmarks: [],
          latestTimestamp: 0, // Track latest bookmark time for group sorting
        };
      }
      acc[videoId].bookmarks.push(bookmark);
      // Keep track of the latest bookmark timestamp within the group
      if (bookmark.createdAt > acc[videoId].latestTimestamp) {
        acc[videoId].latestTimestamp = bookmark.createdAt;
      }
      return acc;
    }, {});

    // Sort bookmarks within each group by timestamp (ascending)
    Object.values(grouped).forEach((group) => {
      group.bookmarks.sort((a, b) => a.timestamp - b.timestamp);
    });

    return grouped;
  }

  // --- Sorting Logic ---
  function sortBookmarkGroups(groupedBookmarks, sortBy) {
    // Convert grouped object to an array for sorting
    const groupsArray = Object.entries(groupedBookmarks).map(
      ([videoId, data]) => ({ videoId, ...data })
    );

    groupsArray.sort((a, b) => {
      switch (sortBy) {
        case 'newest':
          return b.latestTimestamp - a.latestTimestamp; // Sort groups by newest bookmark within
        case 'oldest':
          return a.latestTimestamp - b.latestTimestamp; // Sort groups by oldest bookmark within
        case 'title': // New sort option: Alphabetical by video title
          return a.title.localeCompare(b.title);
        default:
          return b.latestTimestamp - a.latestTimestamp; // Default to newest
      }
    });

    return groupsArray; // Return sorted array of groups
  }

  // --- Rendering Logic ---
  function createBookmarkElement(bookmark, index) {
    const thumbnailUrl = `https://i.ytimg.com/vi/${bookmark.videoId}/hqdefault.jpg`; // Use hqdefault
    const div = document.createElement('div');
    div.className = 'bookmark';
    const bookmarkId = bookmark.id;
    const notes = bookmark.notes || ''; // Get notes, default to empty string

    // Determine a fallback thumbnail if needed (consider a local placeholder)
    const finalThumbnailUrl = thumbnailUrl; // For now, just use the fetched one

    div.innerHTML = `
      <div class="timestamp-preview">
        Saved on ${new Date(bookmark.createdAt).toLocaleString(undefined, {
          year: 'numeric',
          month: 'short',
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit',
        })} // Use createdAt for display
      </div>
      <div class="thumbnail-container">
        <img
          class="thumbnail"
          src="${finalThumbnailUrl}" /* Set src directly */
          alt="Video thumbnail"
        />
        <div class="thumbnail-placeholder" style="background: #eee; height: 100%; width: 100%; text-align: center; line-height: 68px; color: #aaa; font-size: 12px;">No thumb</div>
        <div class="timestamp-badge">${formatTime(bookmark.timestamp)}</div>
      </div>
      <div class="bookmark-info">
        <div>
          <a href="${bookmark.url}" target="_blank">
            <div class="title">${bookmark.videoTitle}</div>
          </a>
          <div class="timestamp-actions">
            <button class="share-btn" data-url="${
              bookmark.url
            }" title="Copy link to clipboard">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M18 16.08c-.76 0-1.44.3-1.96.77L8.91 12.7c.05-.23.09-.46.09-.7s-.04-.47-.09-.7l7.05-4.11c.54.5 1.25.81 2.04.81 1.66 0 3-1.34 3-3s-1.34-3-3-3-3 1.34-3 3c0 .24.04.47.09.7L8.04 9.81C7.5 9.31 6.79 9 6 9c-1.66 0-3 1.34-3 3s1.34 3 3 3c.79 0 1.5-.31 2.04-.81l7.12 4.16c-.05.21-.08.43-.08.65 0 1.61 1.31 2.92 2.92 2.92s2.92-1.31 2.92-2.92c0-1.61-1.31-2.92-2.92-2.92zM18 4c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zM6 13c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm12 7.02c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1z" fill="currentColor"/>
              </svg>
            </button>
            <button class="delete-btn" data-bookmark-id="${bookmarkId}" title="Delete timestamp">
              <span class="delete-icon">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z" fill="currentColor"/>
                </svg>
              </span>
              <span class="loading-spinner" style="display: none;">
                <svg class="animate-spin" width="14" height="14" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
              </span>
            </button>
          </div>
        </div>
      </div>
      <div class="notes-container">
        <textarea class="notes-textarea" data-bookmark-id="${bookmarkId}" placeholder="Add notes...">${notes}</textarea>
      </div>
    `;

    // Add error handler for the thumbnail image
    const thumbnailImg = div.querySelector('.thumbnail');
    const thumbnailPlaceholder = div.querySelector('.thumbnail-placeholder');
    thumbnailImg.addEventListener('error', () => {
      thumbnailImg.style.display = 'none';
      if (thumbnailPlaceholder) {
        thumbnailPlaceholder.style.display = 'block';
      }
    });

    // Add click handler for share button
    const shareBtn = div.querySelector('.share-btn');
    shareBtn.addEventListener('click', async (e) => {
      e.preventDefault();
      const url = shareBtn.dataset.url;

      try {
        await navigator.clipboard.writeText(url);
        shareBtn.classList.add('shared');
        setTimeout(() => shareBtn.classList.remove('shared'), 1500);
        showNotification('Link copied to clipboard!');
      } catch (err) {
        showNotification('Failed to copy link', 'error');
      }
    });

    return div;
  }

  // Render the list of bookmarks, grouped by video
  function renderBookmarkGroups(filteredBookmarks) {
    bookmarksList.innerHTML = ''; // Clear previous list

    if (filteredBookmarks.length === 0) {
      const searchTerm = searchInput.value.trim();
      emptyState.textContent =
        searchTerm === ''
          ? 'No bookmarks yet. Add some from YouTube!'
          : 'No bookmarks match your search.';
      emptyState.style.display = 'block'; // Show empty state
      bookmarksList.style.display = 'none'; // Hide bookmark list container
      deleteAllBtn.disabled = allBookmarks.length === 0;
    } else {
      emptyState.style.display = 'none';
      bookmarksList.style.display = 'block';

      const grouped = groupBookmarksByVideo(filteredBookmarks);
      const sortedGroups = sortBookmarkGroups(grouped, sortSelect.value);

      sortedGroups.forEach((group) => {
        const groupDiv = document.createElement('div');
        groupDiv.className = 'video-group collapsed';

        const groupHeader = document.createElement('h3');
        groupHeader.className = 'folder-header';
        // Make title a link to the video (first bookmark's URL without timestamp)
        const videoBaseUrl = group.bookmarks[0].url.split('&t=')[0];
        groupHeader.textContent = group.title; // Use group.title directly
        groupHeader.dataset.folderName = group.title; // Use group.title directly
        groupHeader.addEventListener('click', () =>
          toggleFolder(group.title, groupHeader)
        ); // Use group.title directly

        const bookmarksContainer = document.createElement('div');
        bookmarksContainer.className = 'timestamp-list-container';

        // Sort bookmarks within the folder by time added (descending - newest first)
        const sortedBookmarks = group.bookmarks.sort(
          (a, b) => (b.createdAt || 0) - (a.createdAt || 0)
        );

        sortedBookmarks.forEach((bookmark, index) => {
          const bookmarkElement = createBookmarkElement(bookmark, index);
          bookmarksContainer.appendChild(bookmarkElement);
        });
        groupDiv.appendChild(groupHeader);
        groupDiv.appendChild(bookmarksContainer);
        bookmarksList.appendChild(groupDiv);
      });

      deleteAllBtn.disabled = allBookmarks.length === 0;
    }
  }

  // --- Filtering Logic ---
  function filterBookmarks(searchTerm) {
    const lowerSearchTerm = searchTerm.toLowerCase();
    const filtered = searchTerm
      ? allBookmarks.filter((bookmark) =>
          bookmark.videoTitle.toLowerCase().includes(lowerSearchTerm)
        )
      : allBookmarks;
    renderBookmarkGroups(filtered); // Update the list display using grouped rendering
  }

  // Use debounced search
  const debouncedFilter = debounce(
    (searchTerm) => filterBookmarks(searchTerm),
    300
  );
  searchInput.addEventListener('input', (e) => debouncedFilter(e.target.value));

  sortSelect.addEventListener('change', () =>
    filterBookmarks(searchInput.value)
  );

  deleteAllBtn.addEventListener('click', async () => {
    if (
      window.confirm(
        'Are you sure you want to delete ALL bookmarks? This cannot be undone.'
      )
    ) {
      deleteAllBtn.disabled = true; // Disable while deleting
      try {
        await chrome.storage.sync.set({ bookmarks: [] });
        allBookmarks = [];
        filterBookmarks('');
        showNotification('All bookmarks deleted');
      } catch (error) {
        console.error('Failed to delete all bookmarks:', error);
        showNotification('Error deleting bookmarks', 'error');
      } finally {
        // Re-enable button only if there are bookmarks left (shouldn't happen here, but good practice)
        deleteAllBtn.disabled = allBookmarks.length === 0;
      }
    }
  });

  let lastDeletedBookmark = null;
  let lastDeletedIndex = -1; // Store index for potential undo

  function showUndoNotification() {
    const notification = document.createElement('div');
    notification.className = 'notification with-action';
    notification.innerHTML = `
      <span>Bookmark deleted</span>
      <button class="undo-btn">Undo</button>
    `;

    document.body.appendChild(notification);

    const undoBtn = notification.querySelector('.undo-btn');
    undoBtn.addEventListener('click', async () => {
      if (lastDeletedBookmark) {
        // Re-insert at the original position if possible
        if (lastDeletedIndex >= 0 && lastDeletedIndex <= allBookmarks.length) {
          allBookmarks.splice(lastDeletedIndex, 0, lastDeletedBookmark);
        } else {
          allBookmarks.push(lastDeletedBookmark); // Fallback: add to end
        }
        await chrome.storage.sync.set({ bookmarks: allBookmarks });
        filterBookmarks(searchInput.value);
        notification.remove();
        showNotification('Bookmark restored');
        lastDeletedBookmark = null;
        lastDeletedIndex = -1;
      }
    });

    setTimeout(() => {
      if (notification.parentNode) {
        notification.remove();
        lastDeletedBookmark = null;
        lastDeletedIndex = -1;
      }
    }, 5000);
  }

  // More efficient delete function
  async function deleteBookmark(bookmarkId) {
    const indexToDelete = allBookmarks.findIndex((b) => b.id === bookmarkId);

    if (indexToDelete !== -1) {
      lastDeletedBookmark = allBookmarks[indexToDelete];
      lastDeletedIndex = indexToDelete; // Store index before splicing
      allBookmarks.splice(indexToDelete, 1);

      try {
        await chrome.storage.sync.set({ bookmarks: allBookmarks });
        filterBookmarks(searchInput.value); // Update the UI immediately
        showUndoNotification(); // Show undo option
      } catch (error) {
        // If saving fails, revert the change in memory and notify user
        console.error('Failed to save deletion:', error);
        if (lastDeletedBookmark) {
          allBookmarks.splice(lastDeletedIndex, 0, lastDeletedBookmark); // Put it back
          filterBookmarks(searchInput.value); // Update UI again
        }
        showNotification('Failed to delete bookmark', 'error');
        lastDeletedBookmark = null; // Clear undo state
        lastDeletedIndex = -1;
      }
    } else {
      console.warn('Bookmark ID not found for deletion:', bookmarkId);
      showNotification('Could not find bookmark to delete', 'error');
    }
  }

  // --- Add Notes Save Listener (Debounced) ---
  const debouncedSaveNote = debounce(async (bookmarkId, newNotes) => {
    try {
      const result = await chrome.storage.sync.get('bookmarks');
      const bookmarks = result.bookmarks || [];
      const bookmarkIndex = bookmarks.findIndex((b) => b.id === bookmarkId);

      if (bookmarkIndex !== -1) {
        bookmarks[bookmarkIndex].notes = newNotes;
        await chrome.storage.sync.set({ bookmarks });
        console.log(`Note saved for bookmark: ${bookmarkId}`);
        // Optional: Show a subtle save indicator
      } else {
        console.error('Bookmark not found for saving note:', bookmarkId);
      }
    } catch (error) {
      console.error('Error saving note:', error);
      showNotification('Error saving note', 'error');
    }
  }, 500); // Save 500ms after user stops typing

  bookmarksList.addEventListener('input', (e) => {
    const textarea = e.target.closest('.notes-textarea');
    if (textarea) {
      const bookmarkId = textarea.dataset.bookmarkId;
      const newNotes = textarea.value;
      debouncedSaveNote(bookmarkId, newNotes);

      // Auto-resize textarea height
      textarea.style.height = 'auto'; // Reset height
      textarea.style.height = `${textarea.scrollHeight}px`;
    }
  });

  // --- Initialize Textarea Heights on Render ---
  // We need to ensure heights are set after elements are in the DOM
  // This can be tricky with async rendering. A MutationObserver is robust.
  const resizeObserver = new MutationObserver((mutations) => {
    for (const mutation of mutations) {
      if (mutation.type === 'childList') {
        mutation.addedNodes.forEach((node) => {
          if (node.nodeType === 1 && node.classList.contains('bookmark')) {
            const textarea = node.querySelector('.notes-textarea');
            if (textarea) {
              textarea.style.height = 'auto';
              textarea.style.height = `${textarea.scrollHeight}px`;
            }
          }
          // Also handle cases where the whole group is added
          if (node.nodeType === 1 && node.classList.contains('video-group')) {
            node.querySelectorAll('.notes-textarea').forEach((textarea) => {
              textarea.style.height = 'auto';
              textarea.style.height = `${textarea.scrollHeight}px`;
            });
          }
        });
      }
    }
  });

  resizeObserver.observe(bookmarksList, { childList: true, subtree: true });

  bookmarksList.addEventListener('click', (e) => {
    const groupTitle = e.target.closest('.folder-header');
    if (groupTitle) {
      e.preventDefault(); // Prevent default anchor tag behavior if title is a link
      const groupDiv = groupTitle.closest('.video-group');
      if (groupDiv) {
        groupDiv.classList.toggle('collapsed');
      }
    }

    // Handle delete button clicks (existing logic)
    const deleteBtn = e.target.closest('.delete-btn');
    if (deleteBtn && !deleteBtn.disabled) {
      const bookmarkId = deleteBtn.dataset.bookmarkId;
      if (bookmarkId) {
        // Show loading spinner on the specific button
        const icon = deleteBtn.querySelector('.delete-icon');
        const spinner = deleteBtn.querySelector('.loading-spinner');
        if (icon) icon.style.display = 'none';
        if (spinner) spinner.style.display = 'inline-block';
        deleteBtn.disabled = true; // Disable button during delete

        deleteBookmark(bookmarkId).finally(() => {
          // Restore button state regardless of success/failure
          if (icon) icon.style.display = 'inline-block';
          if (spinner) spinner.style.display = 'none';
          // Re-enable might happen automatically if the element is removed,
          // but good practice to handle it if deletion fails.
          // The element might not exist anymore if deletion was successful.
          const stillExistingBtn = document.querySelector(
            `.delete-btn[data-bookmark-id="${bookmarkId}"]`
          );
          if (stillExistingBtn) {
            stillExistingBtn.disabled = false;
          }
        });
      }
    }
  });

  // Initial call to display bookmarks
  // chrome.storage.sync.get('bookmarks', (data) => {
  //     allBookmarks = data.bookmarks || [];

  //     renderBookmarkGroups(allBookmarks);
  // });

  // --- New function to toggle folder visibility ---
  async function toggleFolder(folderName, headerElement) {
    const listContainer = headerElement.nextElementSibling; // The timestamp list container
    const isCollapsed = headerElement.classList.toggle('collapsed');

    // Update display
    listContainer.style.display = isCollapsed ? 'none' : 'block';

    // Update and save state
    const stateResult = await chrome.storage.local.get(FOLDER_STATE_KEY);
    const folderStates = stateResult[FOLDER_STATE_KEY] || {};
    folderStates[folderName] = isCollapsed;
    await chrome.storage.local.set({ [FOLDER_STATE_KEY]: folderStates });
    console.log('Folder states updated:', folderStates);
  }
  // --- End of new function ---

  // Load folder states
  chrome.storage.local.get(FOLDER_STATE_KEY, (result) => {
    const folderStates = result[FOLDER_STATE_KEY] || {};
    const folderHeaders = bookmarksList.querySelectorAll('.folder-header');
    folderHeaders.forEach((header) => {
      const folderName = header.dataset.folderName;
      if (folderStates[folderName]) {
        header.classList.add('collapsed');
        header.nextElementSibling.style.display = 'none';
      }
    });
  });
});
</file>

</files>
